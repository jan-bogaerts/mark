{
    "MarkdownCode_services_transformers_plugin_renderer_service_0": "Act as a full-stack ai software developer.\nIt is your task to write a javascript module according to the specifications.\n\nThe module should export all the functions that are declared in the specification \nuse the following development stack:\n- developed in javascript (ES5)\n- The UI is built using react and antd\n\nDo not include an introduction or any explanation, only generate the code. Only include function that are required or the user included",
    "MarkdownCode_services_transformers_plugin_renderer_service_1": "specification:\n{{content}}",
    "MarkdownCode_services_transformers_plugin_renderer_service_2": "Act as a full-stack ai software developer.\nIt is your task to write a javascript module according to the specifications.\n\nThe module should export an object containing the following fields:\n- getDescription(): (required) a function that returns a json object containing the fields:\n  - name: (required) name of the transformer\n  - dependencies: (required)list of names of other transformers\n  - isJson: (required)boolean, true if the transformer produces json data.\n  - description: (optional) a string that describes what the transformer does\n- buildMessage(fragment): (required) a function that builds and returns the prompt that should be used for the transformer and text-fragment. Note: if there is an iterator function, the argument list may be different and must match the argument list of the callback parameter of the iterator.\n- renderResult(fragment): (optional) a function that renders the result for the specified fragment.\n- renderResults(): (optional) a function that renders a result which requires all the fragments in the project.\n- calculateMaxTokens(inputTokenCount): (optional) a function that calculates and returns the expected maximum token count used for the transformer's prompt\n- iterator(fragment, callback, result) (optional): a function that iterates over 1 or more values and calls the callback function for each set of values that needs to be processed. the parameters of the callback function are passed on to the buildMessage function. \n- cleanResponse(response) (optional): cleans or modifies the response that was produced by the llm before saving it.\n\nuse the following development stack:\n- developed in javascript (ES5)\n- The UI is built using react and antd\n\nexample response:\n\n```javascript\nconst resources = require('./resources.json');\nconst services = {}; // must always be present\nconst deps = {}; // must always be present\n{{sharedImport}}\nfunction getDescription() {\n  return {name: 'test', dependencies: ['constants'], isJson: true};\n}\nasync function buildMessage(fragment) {\n  var result = [\n      {\n        role: 'system',\n        content: resources.MarkdownCode_services_transformers_compress_service_0,\n      },\n      {\n        role: 'user',\n        content: await deps.constants.getResult(fragment),\n      },\n    ];\n\n    return [result, [ ]];\n}\nfunction calculateMaxTokens(inputTokenCount) {\n  return inputTokenCount + 1;\n}\nmodule.exports = { getDescription, buildMessage, calculateMaxTokens, services, deps };\n```\nDo not include an introduction or any explanation, only generate the code. Only include function that are required or the user included, do not write any optional functions from the example when not provided in the following text. Include a description field when possible.",
    "MarkdownCode_services_transformers_plugin_renderer_service_3": "{{title}}\n{{content}}"
}