{"cache":{"80a81923-8079-4820-b50c-5cd3df1b12e1":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nThe following development stack is used:\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n"},{"role":"user","content":"list all the classes declared in:\nmain window\n- the main-window component is the content of the first window that is shown when the application starts.\n- the root of the main window consists out of a configProvider component (from antd) which is used to apply the theme to the antd components: `theme={{algorithm: theme === 'dark' ? darkAlgorithm : defaultAlgorithm}}`\n- it contains the following components:\n  - a toolbar: located at the top of the window.\n  - an extra div (together with the toolbar in the header), with classname `os-draggable`, used to drag the window around\n  - a body: this component occupies all of the remaining space in the window\n"},{"role":"assistant","content":"Do not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a\njson array.\n\nbad:\n[\n  {\n    \"file\": \"x.js\",\n    \"items\": [\n      \"x\"\n    ]\n  },\n  {\n    \"file\": \"y.js\",\n    \"items\": [\n      \"y\"\n    ]\n  }\n]\n\ngood:\n[\n    \"x\",\n    \"y\"\n]"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"af17bd18-7341-4623-af40-b35190024b95":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nlog window\n- the log-window component is used as the content of the secondary window of the application and shows log messages that are generated by the application.\n- When the component is loaded, call `window.electron.onLogMsg` to register the event handler `handleLogMsg` for receiving messages.\n- When the component is unloaded, call `window.electron.removeOnLogMsg(handleLogMsg)` to clean up.\n- the root of the main window consists out of a configProvider component (from antd) which is used to apply the theme to the antd components: `theme={{algorithm: theme === 'dark' ? darkAlgorithm : defaultAlgorithm}}`\n  - the first child of configProvider is a div that makes certain the user can scroll when the content is larger than the visible area.\n- handleLogMsg: \n  - check if the root div was scrolled all the way to the end\n  - convert the parameter to a json object\n  - if the json object contains the field 'response', search the previous log message with the same key in `logMsgs`, add the response field and make certain that the component is refreshed.\n  - if the json doesn't contain the field 'response': add the object to the component's state field `logMsgs`\n  - if the root div was scolled down to the end, scollIntoView the endRef div so that the root div is scrolled down to the end again. Do this async (with setTimeout so that scrolling is done after rendering)\n- the renderer of the log window:\n  - first shows an extra div at the top, with classname `os-draggable`, used to drag the window around\n  - loops over all the entries in logMsgs and displays the following fields of each object:\n    - location (in bold)\n    - transformerName (in bold)\n    - inputData.model\n    - inputData.max_tokens\n    - inputData.temperature\n    - for every item in inputData.messages:\n       - item.role (in bold)\n       - item.content\n    - if inputData.response exist\n      - show this value\n      - show a vertical line\n- Make certain that:\n  - all the text is displayed using the styling `white-space: pre-wrap` so that new lines are rendered correctly\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"8308b963-e815-48b2-a8a7-ce85d1353533":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\ntoolbar\n\nthe application uses a toolbar similar to applications like mS Access, excel, word or draw: a single integrated menu and toolbar\n\n- At the top of the toolbar are a nr of tabs (use the tabs from the antd library)\n- all components on the toolbar show a tooltip (from the antd library) containing a short description of the action.\n- create a json structure for all the tabs (fields: key, label, children). rebuild the list at every render so that the tabs are recreated, needed to apply the theme when it changes.\n- assign the json structure to the items property.\n\nthe following tabs are available:\n- home: this is shown as the first tab when the application starts.\n- transformers\n- format\n- preferences\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"907586bd-b127-4fc8-925d-7374bc0a39b3":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nhome\n- the home-tab component is a wrapper that displays it's children in a row.\n- This component contains the following child components :\n  - file section\n  - edit section\n  - undo section\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"f740a1e5-7a90-47b9-a4b1-654a97531cf1":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nfile section\n- the file-section component contains actions related to the project and file management.\n- all buttons use an appropriate icon as content, no text.\n- it supports the following actions\n  - New Project: a button to create a new project\n    - if `await trySave() == true` (if the action is canceled, dont create a new project)\n      - call `storageService.new()`\n    - disabled when `window.electron.isPluginMode == true`\n    - icon: FileOutlined\n  - open: a button to open an existing project.\n    - disabled when `window.electron.isPluginMode == true`\n    - if `await trySave() == true` (if the action is canceled, dont create a new project)\n      - show a dialog box to select a file `dialogResult = await dialogService.showOpenDialog()`\n      - if not dialogResult.canceled and dialogResult.filePaths, ask the storage-service to open the first file in filePaths (can only open 1 file at a time).\n    - wrap in an exception handler that shows an error dialog\n  - save: a button to save the current project to file.\n    - enabled when the project service has a filename for the project (field 'filename' has a value) and projectService.isDirty == true\n    - if the project file does not yet have a filename, show a save-as dialog `dialogResult = await dialogService.showSaveDialog()`\n    - if the user doesn't provide a valid filename, stop the action `dialogResult.canceled or not dialogResult.filePath`\n    - if the user provides a valid filename,\n      - call the storage-service 'save' function with filename as param (with await so that the 'new' function can wait until the previous project is loaded).\n    - if the project service already has a filename,\n      - call storage-service save without param.\n    - wrap in an error handler and show the error\n  - save as: a button to save the current project to a new location.\n    - show a save-as dialog `dialogResult = await dialogService.showSaveDialog()`\n    - if not dialogResult.canceled and dialogResult.filePath, ask the storage-service to save the project to the new location.\n    - wrap in an exceptions handler and show the error\n  - auto-save: a toggle button, when pressed, asks the project service to update the auto-save state (setAutoSaveState).\n    - the toggle button's state follows that of the project service's auto-save state (getAutoSaveState).\n- The project-service needs to be monitored for changes so that the state of the buttons can be updated (field: eventTarget, event: 'is-dirty-changed').\n- When the component is mounted, call `window.electron.onCanClose(this.tryCanClose)` so we can save the project if need be and also cancel the action. Call `window.electron.removeOnCanClose(this.tryCanClose)` when unmounting to remove the event handler\n- functions:\n  - trySave():\n    ```python\n      if this.state.isDirty:\n        confirm = await dialogService.confirm('Do you want to save the changes first?')\n        if confirm == None:\n          return False\n        elif confirm:\n          await this.saveProject()\n      return True\n    ```\n  - tryCanClose():\n    ```python\n      res = await this.trySave()\n      window.electron.canCloseProcessed(res)\n    ```\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"41dc0b70-7750-46ef-a8ea-fd48d5c99b94":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nedit section\n- the edit-section component contains actions related to the clipboard and the currently selected data.\n- all buttons use an appropriate icon from the '@ant-design/icons' library as content, no text.\n- it supports the following actions\n  - cut: a button to initiate the cut command of the selection service\n    - enabled when the selection service has any data marked as selected.\n  - copy: a button to initiate the copy command of the selection service\n    - enabled when the selection service has any data marked as selected.\n  - paste: a button to initiate the paste command of the selection service\n    - enabled when the clipboard contains text data && SelectionService.getEditor().\n    - use the BiPaste icon from react-icons\n    - call `clipboard.readText()` to get the data that needs to be pasted.\n  - delete: a button to initiate the delete command of the selection service\n    - enabled when the selection service has any data marked as selected.\n  - select all: a button to select all the text in the currently active window.\n    - use the icon MdSelectAll  from react-icons\n  - clear selection: a button to clear the current selection buffer.\n    - enabled when the selection service has any data marked as selected.\n    - use the icon MdOutlineDeselect from react-icons\n- to check if the clipboard contains text data:\n  - use the clipboard imported from electron\n  - when the component is loaded and when the ipcRenderer emits the 'focused' event, call `available = clipboard.availableFormats(); available.includes('text/plain')` to see if there is supported data in the clipboard.\n- when loaded, subscribe the callback `handleSelectionChanged` to the selection service. Unsubscribe when unloading.\n- `handleSelectionChanged`: update the state of the buttons.\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"a544fcfc-0cbb-4b88-b2c1-5dcd7db0816b":{"result":["UndoSection","UndoService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nundo section\n- the undo-section component contains actions that the undo / redo service can perform.\n- all buttons use an appropriate icon as content, no text.\n- the service supports the following actions\n  - undo: a button to undo the last action\n    - enabled when the undo-service has undo actions. \n    - calls the undo-service's undo function\n  - redo: a button to redo the last action, preformed by the project's undo service.\n    - enabled when the undo-service has redo actions\n    - calls the undo-service's redo function.\n- The undo service needs to be monitored for changes so that the state of the buttons can be updated.\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"5f312819-504f-4fae-ab3d-c823668d659b":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\ntransformers\n- the transformers-tab component is a wrapper that displays it's children in a row.\n- This component contains the following child components :\n  - configuration section\n  - build section\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"6a3b7dc2-86c4-41e9-b132-9ed0a00a8dde":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\ntransformers-configuration section\n- The transformers-configuration section contains actions that are related to the transformers that are available in the application.\n- all buttons are wrapped in a tooltip (from the antd library) containing a description of the action.\n- it contains the following actions:\n  - edit transformers: a button that which will open a new window of the Mark editor in plugin-mode, using the project at the specified path.\n    - disabled when `window.electron.isPluginMode == true`\n    - icon: MdRebaseEdit\n    - do:\n      ```python\n        result = await window.electron.openPluginEditor(folderService.plugins)\n        if result:\n          await AllSparkService.refreshPlugins()\n      ```\n    - wrap round try-catch and show error.\n  - active entry point: a drop down list, populated with the names of the transformers (entryPoint.name) found in `cybertronService.entryPoints`. The selected item in the dropdownlist comes from `cyberTronService.activeEntryPoint`. Whenever the selection changes in the drop down list, this field is updated.\n  - Monitors for events dispatched from the all-spark service (field: eventTarget, event: transformers-loaded): whenever this event comes in, rebuild the list of entry points.\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"d1d83d0c-fde7-47a6-af75-696b0181f037":{"result":["BuildSection","BuildService","ProjectService","PositionTrackingService","LogService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nbuild section\n- the build-section component contains actions that the build-service can perform.\n- all buttons use an appropriate icon as content, no text.\n- all buttons are wrapped in a tooltip (from the antd library) containing an extensive description of the action.\n- it contains the following actions:\n  - all: a button to start rendering the currently active transformer for the entire project.\n    - disabled when project-service.isAnyFragmentOutOfDate() == false or when buildService.isBuilding or !positionTrackingService.activeTransformer\n    - calls `build-service.buildAll()`\n  - active fragment with active transformer: a button to start rendering the result for the currently active fragment and transformer.\n    - disabled when `!positionTrackingService.activeFragment || !positionTrackingService.activeTransformer || positionTrackingService.activeTransformer.isFullRender || buildService.isBuilding`\n    - calls `build-service.runTransformer(positionTrackingService.activeFragment, positionTrackingService.activeTransformer)`\n  - separator (type='vertical', height='24px')\n  - show log: a toggle button, when pressed, asks the log-service to update the showLogWindow state.\n    - the toggle button's state follows that of the log-service's showLogWindow state. \n  - show debugger: a toggle button, when pressed, asks the build-service to update the showDebugger state.\n    - the toggle button's state follows that of the build-service's showDebugger state. \n  - separator (type='vertical', height='24px')\n  - debug: a toggle button, when pressed, asks the build-service to update the debug state.\n    - the toggle button's state follows that of the build-service's debug state. \n  - run next: a button that will continue rendering to the next transformer\n    - disabled when `!debug || !isBuilding || !isPaused`\n  - stop run: a button that calls  `buildService.stopRun()`\n    - use the icon TbPlayerStop (from react-icons/tb)\n    - disabled when `!debug || !isBuilding || !isPaused`\n  - `isPaused = !!buildService.debugResolver`\n- Store the disabled value of all the buttons in the state so that they can be updated from the event handlers.\n- initialize the button states when loaded\n- register event handlers to monitor for changes with:\n  - project-service (field: eventTarget, event: fragment-out-of-date): update disabled state of the buttons\n  - position-tracking service (field: eventTarget, event: change): update disabled state of the buttons\n  - build-service (field eventTarget, events: is-building, is-pausing, has-resumed, show-debugger): update disabled state of the buttons\n  - log-service (field eventTarget, event: log-window-visibility): update the disabled state of show-log.\n- unregister the event handlers when unloaded.\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"65b637c7-f0ca-4672-aa83-8306b386db2b":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nformat\n- the format-tab component is a wrapper that displays it's children in a row.\n- This component contains the following child components :\n  - style section\n  - paragraph section\n  - font section\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"489a33cf-f216-48c2-9d18-987c3bc46280":{"result":["StyleSection","LuHeading1","LuHeading2","LuHeading3","LuHeading4","LuHeading5","LuHeading6","PiParagraph","LuCode2LuQuote","LuCode2","LuList","PiListNumbers","SelectionService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nstyle section\n- the style-section component contains actions related to the markup used in the text for applying markdown formatting.\n- all buttons use an appropriate icon (from react-icons) as content, no text.\n- there is a button for each of the following formatting styles:\n  - heading 1 (btn: LuHeading1)\n  - heading 2 (btn: LuHeading2)\n  - heading 3 (btn: LuHeading3)\n  - heading 4 (btn: LuHeading4)\n  - heading 5 (btn: LuHeading5)\n  - heading 6 (btn: LuHeading6)\n  - paragraph (btn: PiParagraph)\n  - quote (btn: LuCode2LuQuote)\n  - code (btn: LuCode2)\n  - bullet list (btn: LuList)\n  - numbered list (btn: PiListNumbers)\n- when a button is pressed, the formatting style is applied to the currently selected text in the selection-service.\n- only 1 button can be selected at the same time, it is not possible to have no selection at all.\n- all the buttons are lined up in a single row.    \n- the selection-service (not a component) is monitored for changes in the currently selected text. whenever the text selection is changed, the state of the toggle buttons is updated to reflect the style of the currently selected text. The selection service provides a method for retrieving the style of the currently selected text.\n\nRemember that each button needs it's own appropriate icon.\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"048ce355-2a85-45c2-9d30-70eae30e832b":{"result":["SelectionService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nparagraph section\n- the paragraph-section component contains actions related to the markup used in the text for applying markdown formatting.\n- all buttons use an appropriate icon as content, no text.\n- all buttons are wrapped in a tooltip (from the antd library) containing an extensive description of the action.\n- it supports the following actions\n  - indent: a button to increase the indent of the current line or selection. The selection-service performs this action on the selected text or current cursor position.\n    - use the icon MdFormatIndentDecrease from react-icons\n  - unindent: a button to decrease the indent of the current line or selection. The selection-service performs this action on the selected text or current cursor position.\n    - icon: MdOutlineFormatIndentDecrease from react-icons\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"366c660c-4aa7-4160-9e22-e6ef4469c411":{"result":["FontSection","SelectionService","PositionTrackingService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nfont section\n- the font-section component contains actions related to the markup used in the text for applying markdown formatting.\n- all buttons use an appropriate icon as content, no text.\n- all buttons are wrapped in a tooltip (from the antd library) containing an extensive description of the action.\n- whenever the text selection is changed (in the selection-service), the state of the toggle buttons is updated to reflect the state of the selected text.\n- whenever the cursor position is changed (in the position-tracking-service, event: pos-changed), update the state of the buttons. \n- it supports the following actions\n  - bold: a toggle button to set the bold state on/off on the selected text and to show the state of the current selection. \n  - italic: a toggle button to set the italic state on/off on the selected text and to show the state of the current selection. \n  - underline: a toggle button to set the underline state on/off on the selected text and to show the state of the current selection. \n  - strike-though: a toggle button to set the strike-through state on/off on the selected text and to show the state of the current selection. \n- all actions call the `selectionService.setBlockStyle` function to apply the selection and `selectionService.getBlockStyles` to set the state of te buttons.\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"982c423f-5854-4c77-af54-9ae223a79db9":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\npreferences\n- the preferences-tab component is a wrapper that displays it's children in a row.\n- This component contains the following child components :\n  - GPT\n  - View\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"c25f5105-2ce2-4322-9637-09c2d74ac80a":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\ngpt section\n- the GPT-section component contains actions related to the configuration of the GPT service.\n- all buttons use an appropriate icon as content, no text.\n- The GPT-section component keeps track of the open state of the 'open-ai configuration dialog'\n- it supports the following actions\n  - key: this button opens the 'open-ai configuration dialog'.\n    - use a key for the icon.\n  - model: the ModelComboBox component (Select in antd) where the user can select the default model for requests sent to open-ai.\n    - the list of available models used to populate the combobox, comes from the gpt-service.\n    - get the initial value for the combobox from the gpt-service (getDefaultModel function).\n    - when the value is changed, save to the gpt-service (setDefaultModel function).\n    - Whenever the prop openApiKey is updated, refresh the list of available models\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"f7a265c4-53b4-4c62-af43-adf2695e4272":{"result":["OpenAIConfigurationDialog","GPTService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nopen-ai configuration dialog\n- The open-ai configuration dialog is a modal dialog (from the antd library) implementation that is used to edit the open-ai configuration settings.\n- the top of the dialog contains a title with short description.\n- the dialog contains an input box where the user can enter his api-key that will be used for api-calls with the open-ai platform.\n  - When the dialog box opens, the current value of the api-key is retrieved from the gpt-service and shown in the input box.\n- At the bottom of the dialog box are 2 buttons:\n  - cancel: close the modal dialog without saving the value.\n  - ok: close the modal dialog after saving the new api-key value to the gpt-service. \n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"b49f427c-4dfe-4510-8e8b-ba3befef77e0":{"result":["ThemeService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nview section\n- the view-section component contains actions related to the configuration of the appearance of the application\n- all buttons use an appropriate icon as content, no text.\n- it supports the following actions\n  - theme: this is a combobox where the user can select the preferred color mode: light or dark mode. This value is linked to the value of the theme-service that manages the currently selected theme (get & set current theme).\n  - font: this is a combobox that the user can use to select the font for the markdown text. This value is linked to the value of the theme-service (get & set current font). Supported fonts: Consolas (monospace) Helvetica (sans-serif), Arial (sans-serif), Arial Black (sans-serif), Verdana (sans-serif), Tahoma (sans-serif), Trebuchet MS (sans-serif), Impact (sans-serif), Gill Sans (sans-serif), Times New Roman (serif), Georgia (serif), Palatino (serif), Baskerville (serif), Andalé Mono (monospace), Courier (monospace), Lucida (monospace), Monaco (monospace), Bradley Hand (cursive), Brush Script MT (cursive), Luminari (fantasy), Comic Sans MS (cursive)\n  - font-size: this is a combobox that the user can use to select the size of the font for the markdown text. This value is linked to the value of the theme-service (get & set current font-size). It supports values ranging from 6px up to 50px.\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"60d16ad6-73cf-4bde-845c-000dff979205":{"result":["Body"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nbody\n- the body component represents the main body of the application.\n- it's entire area is filled with a Split component of the  @geoffcox/react-splitter library \n  - initialPrimarySize = this.state.verticalSplitSize\n  - minPrimarySize='50px'\n  - minSecondarySize='15%'\n  - defaultSplitterColors = colors, note:\n    ``` javascript\n      if (theme === 'light') {\n        colors = {\n          color: '#e8e8e8',\n          hover: 'gray',\n          drag: '#f5f5f5',\n        };\n      } else {\n        colors = {\n          color: '#323233',\n          hover: 'gray',\n          drag: '#979797',\n        };\n      }\n    ```\n  - children:\n    - outline component\n    - Split component:\n      - initialPrimarySize = this.state.horizontalSplitSize\n      - minPrimarySize='50px'\n      - minSecondarySize='15%'\n      - horizontal\n      - children:\n        - editor component\n        - results view component\n- The body component has an event handler for the 'onSplitChanged' callback of both the horizontal and vertical split that will store the new value for it's position (% value) (verticalSplitSize / horizontalSplitSize).\n- When the body component is unloaded, the last position of the horizontal and vertical splitters are stored in the local storage.\n- When the body component is loaded:\n  - the last position of the horizontal and vertical splitters are restored from the local storage, if no value is found, the default '30%' is used.\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"c9ce52a1-c141-47ec-a32c-f087b6174c3e":{"result":["Editor","ProjectService","ThemeService","PositionTrackingService","ChangeProcessorService","DialogService","SelectionService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\neditor\n- The editor component displays markdown text. \n- to display the markdown text, the monaco editor npm package is used.\n- When the editor is loaded:\n  - the text for the monaco editor is retrieved from the project service (`projectService.content`).\n  - theme (convert light to vs-light or dark to vs-dark), font & font-size are retrieved from the theme-service and applied to the monaco editor.\n- Whenever the project service triggers the 'content-changed' event, the editor will reload the text. Before reloading the text in the editor, set the flag `settingValue` to true. This is used to prevent parsing the text after loading the project (the editor triggers handleDidChangeModelContent when loading)\n  - note: register using `projectService.eventTarget.addEventListener('content-changed', handleContentChanged)`, unregister when component unloads \n- Whenever the position-tracking service raises the event 'moveTo', do: `if (this.editorRef.current) this.editorRef.current.revealLineNearTop(e.detail)`, unregister when component unloads\n- subscribe to the theme-service for changes `themeService.subscribe(this.handleThemeChanged)` when the component is loaded and unsubscribe upon unloading `themeService.unsubscribe(this.handleThemeChanged)`\n  - return if no this.editorRef.current\n  - update the options of the editor, call `this.editorRef.current.updateOptions(newOptions)`\n- monitor the following events on the monaco editor:\n  - editorDidMount: store a reference to the editor for further use, set `this.settingValue = true` so that during loading no content changes are processed and register the other event handlers (bound) with the mounted editor:\n    - onDidChangeModelContent: ask the change-processor-service to process the changes. in pseudo:\n    ```python (pseudo)\n    def handleDidChangeModelContent(ev):\n        try:\n          if not editor: # ref to the editor needs to be loaded, should be the case cause event is triggered\n            return\n          if this.settingValue:\n            this.settingValue = False\n            return\n          changeProcessorService.process(ev.changes, editor)\n        catch (e):\n          dialogService.showErrorDialog(e)\n    ```\n    - onDidFocusEditorWidget: store a reference to the monaco editor in the selection service to indicate so that it can work with the correct editor (setEditor).\n    - onDidChangeCursorPosition: if the selection service currently references this monaco editor, ask the position-tracking service to update the current line with the new cursor position `setCurrentPos(e.position)`\n    - onDidChangeCursorSelection: if the selection service currently references this monaco editor, inform the subscribers of the selection-service that the selection has changed `selectionService.notifySubscribers()`\n- the monaco editor always occupies all the space that is available.\n- always include these options for the monaco editor:\n  - automaticLayout: true\n  - selectOnLineNumbers: true\n  - roundedSelection: false\n  - readOnly: false,\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"dba35a53-38b0-41e8-b276-d62e24872944":{"result":["OutlineComponent","ProjectService","PositionTrackingService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\noutline\n- the outline component is positioned to the left of the editor\n- it contains a tree representing the outline of the currently active project: all markdown headings in the document are present in the outline\n- When the component is loaded and whenever the project-service raises the 'content-changed' event to indicate that a new project was loaded, the project data (field: textFragments) is retrieved from the project-service and converted into a tree structure using the function 'convertToTreeData'.\n  - note: register using `projectService.eventTarget.addEventListener('content-changed', handleContentChanged)`\n- Whenever the project service raises an event that a data item was removed (event: fragment-deleted), call the 'handleContentChanged' function\n- Whenever the project service raises an event that a data item was added (fragment-inserted) or (multiple) item(s) were changed (the event 'title-changed'), rebuild the tree structure.\n- whenever the user expands a tree item (callback: onExpand), the key of the expanded item is added to the list of expanded items, when the user collapses an item, the key is removed from the list of expanded items.\n- this component monitors the position-tracking service for changes to the currently selected text-fragment.\n  - use `positionTrackingService.eventTarget.addEventListener('change', eventHandler)` to attach the event handler\n  - when the position changes and `this.isMoving == false`, set the tree's selectedKeys and defaultExpandedKeys properties to the key (if any) of the text-fragment so that the corresponding tree node becomes selected. `key = e.detail?.key`\n- show the tree with lines\n- when the user clicks on a tree-item (onSelect):\n  ```python\n    if len(selectedKeys) > 0:\n      if selectedKeys.length == 0:\n        return\n      fragment = projectService.getFragment(selectedKeys[0])\n      if fragment:\n        try:\n          this.isMoving = True\n          positionTrackingService.setActiveFragment(fragment)\n          if this.state.expandedKeys.indexOf(selectedKeys[0]) == -1:\n            this.setState({ expandedKeys: [...this.state.expandedKeys, selectedKeys[0]] })\n          this.setState({ selectedKeys })\n        finally:\n          this.isMoving = False\n  ```\n- when the user expands a tree-item (onExpand):\n  ```python\n  ```\n- the function 'convertToTreeData' is described as:\n  set parent to null\n  for every data item:\n    Create a new node for the data item. \n      Set the title & key of the node to the title & key of the data item.\n      Use the fragment-status-icon component as the icon for the node. Assign the data item as the value for the property 'fragment' .\n      Also keep a reference to the data item itself in the node.\n    If the item's field depth = 1, add the new node to the root node and make that node the parent \n    Else if there is no parent yet, skip the item\n    If the item's depth is higher then parent.data.depth: add the new node to the parent's children. assign node.parent = parent. make the new node parent \n    If the item's depth equals parent.data.depth or is lower:\n      get the parent of the current parent until the depth of this new parent is 1 higher then the depth of the item and add the item as a child of this new parent. assign node.parent = parent. Make the item the new parent.\n\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"c25bd76e-af9b-4020-abe0-1ba023c9df76":{"result":["FragmentStatusIcon","TextFragment","BuildService","ProjectService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nfragment-status icon\n- The fragment-status icon component is used to indicate the current status of a text-fragment object.\n- the component has the following properties that need to be supplied by consumers of the component:\n  - fragment: a reference to the text-fragment object for which the status needs to be shown\n- based on `fragment?.depth` value, the following icon should be shown:\n  - 1: LuHeading1\n  - 2: LuHeading2\n  - ...\n  - 6 or more: LuHeading6\n- selecting the icon needs to happen in the render function so that no object or function needs to be kept in the state\n- if `fragment?.isBuilding && buildService.isBuilding` show a spin component (from the antd lib) instead of an icon. \n- the LuHeading1, LuHeading2, LuHeading3, LuHeading4, LuHeading5, LuHeading6 icons are imported from the 'react-icons/lu' library.\n- select which icon to use in the render function. Use the state 'depth' to select which icon to use.\n- the component shows a tooltip (from the antd library) which shows the status of the component. \n- for the color of the icon, use:\n  - green if `!fragment?.isOutOfDate`\n    - this status indicates that the fragment is fully up to date\n  - orange if `fragment?.isOutOfDate && fragment?.outOfDateTransformers?.length > 0`\n    - this indicates that the fragment is no longer up to date for a sub-set of the transformers. This list contains the transformer objects. Display the `name` of each transformer in the tooltip. \n  - red if `fragment?.isOutOfDate && !(fragment?.outOfDateTransformers?.length > 0)`\n    - this indicates that the fragment is no longer up to date for all of the transformers. \n- upon construction register an event handler with the project-service (prop: eventTarget) to handle the following events (Unregister when unloading):\n  - `fragment-out-of-date`: \n    - if `e.detail === fragment?.key` then refresh the color of the icon and content of the tooltip when the event is triggered.\n  - `title-changed`:\n    - if `e.detail?.key === fragment?.key` then refresh the icon that is used, based on the new value for `fragment?.depth`\n  - `fragment-building`:\n    - if `e.detail?.fragment?.key === fragment?.key` then set the icon to null, so that the spinner is shown instead\n  - `fragment-up-to-date`:\n    - if `e.detail === fragment?.key` then refresh the icon, tooltip and the color. Do the full recalculation cause this event indicates that the fragment is only up to date for a single transformer, it could still be out-of-date for other transformers.\n- upon construction register an event handler with the build-service (prop: eventTarget) to handle the following events (Unregister when unloading):\n  - `is-building`: if `!e.detail.isBuilding` then hide the spinner and show the icon again.\n- load tooltip, depth & color from prop.fragment when component is loaded\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"912f3e5b-8b82-47e9-af50-50e97a5e03b1":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nresults view\n- the results-view component is positioned at the bottom of the main body\n- the user can view the results that were generated by the transformers that were registered with the cybertron-service, for the currently selected text block.\n- tabs are placed at the bottom of the results view, size = small, tabBarStyle={{marginTop: 0}}\n- For each transformer in the transformers list provided by the cybertron-service (field: transformers), this view creates a tab.\n  - the transformer name is used as the title and key of the tab.\n  - Put a transformer-status-icon component in front of the transformer name, set property 'transformer'\n  - the tab content shows a results-view-tab component\n  - when a tab gets selected, do: `positionTrackingService.setActiveTransformer(transformer)`\n- when first initialized and the list is not empty, set the selected tab to the first item in the list and make certain that `positionTrackingService.setActiveTransformer(transformer)` is called for the correct transformer (first in the list)\n- create a json structure for all the tabs (fields: key, label, children).\n- assign the json structure to the items property.\n- Monitors for events dispatched from the all-spark service (field: eventTarget, event: transformers-loaded): whenever this event comes in, rebuild the list of entry points.\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"d809ef28-5a75-4f2a-8e28-9f895aa87bae":{"result":["TransformerStatusIcon"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\ntransformer-status icon\n- The transformer-status icon component is used to indicate the status of the currently selected text-fragment object in relationship to the transformer that is assigned to the component.\n- the component has the following properties that need to be supplied by consumers of the component:\n  - transformer: a reference to the transformer object for which status info is shown\n- upon construction register an event handler with the position-tracking-service (field: eventTarget) to handle the following events (Unregister when unloading):\n  - `change`: handles changes to the currently selected text-fragment:\n    - refresh the status\n- upon construction register an event handler with the project-service (field: eventTarget) to handle the following events (Unregister when unloading):\n  - `fragment-out-of-date`:  refresh the status\n  - `fragment-building`: refresh the status\n  - `fragment-up-to-date`: refresh the status\n- upon construction register an event handler with the build-service (field: eventTarget) to handle the following events (Unregister when unloading):\n  - `is-pausing`: refresh the status\n  - `has-resumed`: refresh the status\n- The different states to show:\n  - building: \n    - shows a spin component (from the antd lib)\n    - when `positionTrackingService.activeFragment && buildStackService.isRunning(this.props.transformer, positionTrackingService.activeFragment) && !buildService.isPaused`\n  - paused:\n    - shows a pause icon\n    - when `positionTrackingService.activeFragment && buildStackService.isRunning(this.props.transformer, positionTrackingService.activeFragment) && buildService.isPaused`\n  - overwritten:\n    - use the LuType icon (from react-icons)\n    - when `transformer.cache.isOverwritten(positionTrackingService.activeFragment?.key)`\n    - when `transformer.cache.isOutOfDate(positionTrackingService.activeFragment?.key)`: show the icon in red\n  - rendered:\n    - use the MdAutoFixNormal icon (from react-icons)\n    - when not building and not overwritten\n    - when `transformer.cache.isOutOfDate(positionTrackingService.activeFragment?.key)`: show the icon in red\n  - not yet rendered:\n    - use the LuArrowDownToDot icon\n    - when `!transformer.cache.getFragmentResults(positionTrackingService.activeFragment?.key)`\n    - show in orange\n- the component shows a tooltip (from the antd library) which shows the status of the component. If the fragment is out-of-date, include this in the tooltip \n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"581dcdbb-6401-4025-b898-606326a92aae":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nresults view tab\n- the results-view-tab component displays the results of a transformer for a particular text-fragment, identified by it's key.\n- to display the results as markdown, json data, javascript, html or css, the monaco editor npm package is used.\n- The monaco editor fills the full width and height that are available to the component.\n- When the results-view-tab is loaded:\n  - the text for the monaco editor is retrieved from the result-cache of the transformer that is assigned to this component using the currently assigned key, if available (could be that it's null): \n  ```python\n  fragmentKey = positionTrackingService.activeFragment?.key\n  if fragmentKey:\n    toDisplay = this.props.transformer.cache.getFragmentResults(fragmentKey)\n    if this.props.transformer.isJson:\n      toDisplay = JSON.stringify(toDisplay, 0, 2) # do a pretty format with 2 tabs spacing\n  ```\n  - theme (convert light to vs-light or dark to vs-dark), font & font-size are retrieved from the theme-service and applied to the monaco editor.\n- the results-cache of the transformer is monitored for changes in the result (only for changes in the result with the current key).\n  - if the result is marked as 'out-of-date' or 'deleted', show the text as grayed-out.\n  - if the result is marked as 'overwritten', show the text in red \n- when the user changes the text in the monaco editor, the new text is saved to the result-cache of the transformer, marked as overwritten. In pseudo: \n  ```python\n  if this.props.transformer.isJson:\n    try:\n      newValue = JSON.parse(newValue)\n    except:\n      continue # if we cant parse to json, save as text so we still have the value.  \n  transformer.cache.overwriteResult(fragmentKey, newValue)\n  ```\n- subscribe to the theme-service for changes `themeService.subscribe(this.handleThemeChanged)` when the component is loaded and unsubscribe upon unloading `themeService.unsubscribe(this.handleThemeChanged)`\n  - return if no this.editorRef.current\n  - update the options of the editor, call `this.editorRef.current.updateOptions(newOptions)`  \n- monitor the following events on the monaco editor:\n  - editorDidMount: store a reference to the editor for further use and register the other event handlers (bound) with the mounted editor:\n    - onDidFocusEditorWidget: \n      - store a reference to the monaco editor in the selection service to indicate so that it can work with the correct editor.\n      - set `position-tracking-service.activeTransformer = transformer`\n    - onDidChangeCursorSelection: if the selection service currently references this monaco editor, inform the subscribers of the selection-service that the selection has changed\n- put a results-view-context-menu component below the monaco editor (so it's rendered after the editor)\n- the component monitors events triggered by the position-tracking service (field: eventTarget, event: change) and the project-service (field: eventTarget, event: content-changed) for changes to the currently selected text-fragment and when the project changes. \n  - For both events, update the key value and retrieve the data from the result-cache, if the data is not a string, but a json object, convert to a string and show in the monaco-editor. If there is no key, show an empty string.\n- When the component is loaded and whenever the `transformer` property changes, register an event handler on the transformer's cache, if there is a valid transformer assigned (transformer.cache.eventTarget, event: result-changed).\n  - If there was a previous transformer, unregister the event handler first.\n  - Also unregister the event handler when the component unloads and props.transformer != null\n  - when the event triggers retrieve the data again from the result-cache of the transformer (if the data is not a string, but a json object, convert to a string and show in the monaco editor)\n- always include these options for the monaco editor:\n  - automaticLayout: true\n  - selectOnLineNumbers: true\n  - roundedSelection: false\n  - readOnly: false\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"5a4c3d1a-0e09-424b-8fd0-6de342e56291":{"result":["ResultsViewContextMenu","GptService","ProjectService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nresults view context menu\n- the results-view-context-menu is a component that is a wrapper for the Dropdown antd component.\n- it has the properties 'transformer' and 'fragmentKey' that needs to be supplied \n- The dropdown's content is a 'more' button icon and the trigger for the dropdown is 'click'.\n- the 'more' button is positioned in the top-right corner of the parent as a floating button (position: 'absolute', top: 0, right: 16).\n- it contains the following menu items:\n  - model for all: select the gpt model to be used by the transformer.\n    - the sub menu items are provided by the gpt-service's list of available models. `await gptService.getModels()`\n    - the menu item that contains the name of the currently selected model, is shown as selected.\n      - Get the value for the current model, registered for the current transformer, from the gpt-service. `gptService.getModelForTransformer(transformer)`\n    - when an other model is selected, ask the gpt-service to update the model-name used for the transformer. `gptService.setModelForTransformer(model, transformer)`\n  - model for fragment: select the gpt model to be used by the transformer, for the current fragmentKey.\n    - the sub menu items are provided by the gpt-service's list of available models.\n    - the menu item that contains the name of the currently selected model, is shown as selected.\n      - Get the value for the current model, registered under the name of the current transformer and current fragmentKey, from the gpt-service `gptService.getModelForFragment(transformer, fragmentKey)`\n    - when an other model is selected, ask the gpt-service to update the model-name of the transformer and the current title. `gptService.setModelForFragment(model, transformer, fragmentKey)`\n  - a splitter (Menu.Divider)\n  - refresh: when pressed, the transformer associated with the current tab recalculates the result\n  - upon construction register an event handler with the project-service (field: eventTarget) to handle the event 'content-changed' (Unregister when unloading). Refresh the current model for all and the current model for the fragment.\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"9c672829-a31d-47cb-9d66-e676423a06da":{"result":["DialogService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\ndialog service\n- the dialog service is a global singleton that provides a common interface for other components and services to show dialog boxes.\n- the service can show a dialog box for errors, warnings and info.\n- all actions or functions that the user can trigger from a component, should be wrapped in a proper error handler so that when an error occurs, an electron dialog box is shown to the user with details on the error. \n- electron.openDialog is globally available through the contextBridge loade by the preloader script. Dont import the dialog module from electron. \n- functions:\n  - showErrorDialog(param1, param2): \n    ```python (pseudo) \n      config = { title: (param2 ? param1 : 'Error'), content: param2 or param1 }\n      electron.openDialog('showErrorBox', config)\n    ```\n  - showSaveDialog():\n    ```python (pseudo)\n      config = { filters: [{ name: 'markdown', extensions: ['md']}, { name: 'any', extensions: ['*']}] }\n      return electron.openDialog('showSaveDialog', config)\n    ```\n  - showOpenDialog():\n    ```python (pseudo)\n      config = { filters: [{ name: 'markdown', extensions: ['md']}, { name: 'any', extensions: ['*']}] }\n      return electron.openDialog('showOpenDialog', config)\n    ```\n  - confirm(message):\n    ```python\n      config = { type: 'question', buttons: ['Yes', 'No', 'Cancel'], message }\n      res = await window.electron.openDialog('showMessageBox', config)\n      if (res.response === 2) return null\n      return res.response === 0\n    ```\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"fc366a69-db91-4f35-b538-182295436d18":{"result":["ThemeService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\ntheme service\n- The theme service is a global singleton, responsible for managing the currently selected theme font & font-size: when the selected theme, font or font-size is changed, the new value is saved to the local storage (the global `localStorage`) and subscribers are notified. When the service is created, the values previously stored in local storage, are retrieved.\n- The service allows for a selection between a light or dark theme.\n- Every component uses this service to retrieve the currently selected theme (not the font or font-size)  so it can apply this. Components don't need to subscribe for changes to the selected theme value, they only need to retrieve this value from the theme service and use the styling names, based on the selected. theme.\n- The main window refreshes it's entire content when the selected theme is updated.\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"6e52cca8-7baf-4c4f-97c5-effbf603eb14":{"result":["ProjectService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nproject service\n- the project service is a global singleton that:\n  - manages a data-list of the currently loaded text-fragments (field: text-fragments). This stores the parsed text.\n  - stores the raw data content (field: content): this is the text displayed to the user.\n  - keep track of the filename of the currently loaded project (field: filename)\n  - isDirty: a property, when set and the value changes, raises the 'is-dirty-changed' event.\n  - provide the following functions to work with the text-fragments:\n    - deleteTextFragment(fragment): remove the object from the text-fragments list & raise the fragment-deleted event, parameter = fragment.key\n    - addTextFragment(fragment, index): if index is at end of the text-fragments list, add to list, otherwise insert the fragment at the specified position in the text-fragments list. raise the fragment-inserted event.\n    - markOutOfDate(fragment): fragment.isOutOfDate = true, raise the event fragment-out-of-date, param = fragment.key\n    - markUpToDate(fragment, transformer): called when a transformer has updated the result for the fragment. do:\n      - decrement fragment.buildCount\n      - fragment.isBuilding = fragment.buildcount > 0,\n      - if not fragment.outOfDateTransformers?.length > 0: [...CybertronService.transformers]\n      - fragment.outOfDateTransformers.remove(transformer)\n      - if fragment.outOfDateTransformers.length = 0:\n        - fragment.isOutOfDate = false\n        - raise the event fragment-up-to-date, param = fragment.key\n      - otherwise, raise the event 'fragment-building', params: fragment & transformer cause the state has changed for transformers, let them update\n    - markIsBuilding(fragment, transformer): called to indicate that a fragment is being built. do: \n      - fragment.isBuilding = true\n      - fragment.buildCount = (fragment.buildCount || 0) + 1\n      - raise the event 'fragment-building, param {fragment: fragment, transformer: transformer}\n    - getFragment(key): search for the text-fragment with the specified key and return it: `return this.textFragments.find(t => t.key == key)`\n    - getParent(key): search for the first text-fragment that is above the fragment with the specified key in the project's textFragments list, which has a depth value smaller then the specified fragment\n    - tryAddToOutOfDate(key, transformer):\n      ```python\n      fragment = this.getFragment(key)\n      if not fragment:\n        dialogService.showError('Unknown key: ' + key)\n        return\n      if not fragment.isOutOfDate: # first tranformer out of date\n        fragment.outOfDateTransformers = [transformer]\n        this.markOutOfDate(fragment)\n      elif len(fragment.outOfDateTransformers) > 0: # only part is dirty, not yet full fragment\n        fragment.outOfDateTransformers.push(transformer)\n        if len(fragment.outOfDateTransformers) == len(CybertronService.transformers): # fragment just became full dirty\n          fragment.outOfDateTransformers = []\n        this.dispatchEvent('fragment-out-of-date', key) # raise again so ui can adjust\n# fragment is already marked as fully out-of-date (no specific fragment.outOfDateTransformers)\n      ```\n    - isAnyFragmentOutOfDate(): returns true if any of the fragments in textFragments array is marked as isOutOfDate.\n    - dispatchEvent(event, value): dispatches events\n      - creates a custom event object if there is a value, otherwise a regular event object, and \n      - calls eventTarget.dispatch if this.blockEvents == false (initialize blockEvents to false during construction)\n    - setIsDirty(value): if this.isDirty !== value: this.isDirty = value; this.dispatchEvent('is-dirty-changed', value)\n- the project service also keeps track of some user configs like:\n  - wether auto-save is on or not. This value is stored in the local storage.\n  - initialize this.autoSave during construction with the value from the local storage. \n- The project service uses an EventTarget field to dispatch events. Other objects can add / remove event listeners to / from the event target to receive events. \n- it raises the following events:\n  - content-changed: when the project is loaded or a new project is created.\n  - fragment-deleted: when a text fragment is removed from the list\n  - fragment-inserted: when a text fragment is added to the list\n  - fragment-out-of-date: when a fragment is marked as out of date.\n  - fragment-building: when a fragment is being built by a transformer\n  - fragment-up-to-date: when a fragment has been built by a transformer and is marked as (partially) up-to-date\n  - title-changed: when the key of a fragment was changed (raised externally)\n  - is-dirty-changed: when the project was saved or first time it is modified after saving/loading/creating.\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"7946446e-33e7-4bd5-a7b6-3d001271627c":{"result":["ProjectConfigurationService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nproject configuration service\n- The project configuration service keeps track of various configurations of the project.\n- fields:\n  - eventTarget: to register/unregister event handlers that monitor configuration changes\n  - config: json object that provides full access to the entire configuration set.\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"fd347c00-e1ea-4961-8544-3048650deb2b":{"result":["StorageService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nstorage service\n- the storage service is a global singleton that is responsible for reading and writing project data to and from storage.\n- at construction:\n  - do `gptService.onMarkDirty = this.markDirty` so that the project is marked as dirty when the gpt-service's modelsMap changes.\n- functions:\n  - clear(): makes certain all references to data that was previously loaded, is cleared\n    ```python (pseudo)\n    projectService.textFragments = []\n    projectService.content = ''\n    lineParser.clear()\n    positionTrackingService.clear()\n    folderService.clear()\n    for transformer in cybertronService.transformers:\n      transformer.cache.clearCache()\n    gptService.modelsMap = {}\n    projectConfigurationService.loadConfig({})\n    ```\n  - new(): set everything up for a new project.\n    ```python\n      projectService.blockEvents = True\n      this.loading = True # to prevent marking it dirty while loading\n      try:\n        this.clear()\n        resourcesPath = window.electron.resourcesPath\n        templatePath = path.join(resourcesPath, 'templates', 'default.md')\n        if fs.existsSync(templatePath):\n          content = fs.readFileSync(templatePath, 'utf8')\n          projectService.content = content\n          content.split('\\n').forEach((line, index) => lineParser.parse(line, index));\n      finally:\n        projectService.blockEvents = False\n        projectService.dispatchEvent('content-changed')\n        this.loading = False\n        projectService.setIsDirty(False)\n      ```\n\n  - open(filePath): load all the data from disk \n    ```python (pseudo)\n      projectService.blockEvents = True\n      this.loading = True # to prevent marking it dirty while loading\n      try:\n        this.clear()\n        folderService.setLocation(filePath)\n        content = fs.readFileSync(filePath, 'utf8')\n        projectService.content = content\n        projectService.filename = filePath\n        this.loadKeys(filePath) # must be done before parsing so the parser can find the related keys\n        content.split('\\n').forEach((line, index) => lineParser.parse(line, index))\n        for transformer in cybertronService.transformers:\n          transformer.cache.loadCache()\n        this.loadModelsMap(filePath)\n        this.loadProjectConfig(filePath)\n        this.updateOutOfDate() # do before lifting the block on events otherwise the resultcaches keep resetting\n      finally:\n        keyService.loadUuidFromLocs = null # so the keyService knows loading the project is done.\n        projectService.blockEvents = False\n        projectService.dispatchEvent('content-changed')\n        this.loading = False\n        projectService.setIsDirty(False)\n    ```\n  - loadModelsMap(filePath): loads the json file that defines the models to be used with the project\n    - build the json file name by replacing '.md' with '_models.json' at the end of the field 'file'\n    - if the json file exists, load it and assign the parsed json to `gptService.modelsMap`\n  - loadKeys(filePath): loads the json file that stores the mappings between the fragment keys and the location of the fragments in the text.\n    - build the json file name by replacing '.md' with '_keys.json' at the end of the field 'file'\n    - if the json file exists, load it and assign the parsed json to `keyService.loadUuidFromLocs`\n  - loadProjectConfig(filePath): loads the json file that contains the configuration settings for the project\n    - json file name = folderService.projectConfig\n    - if the json file exists, load it and store the parsed json with `projectConfigurationService.loadConfig(configString)`\n  - updateOutOfDate(): updates the list of out-of-date transformers for each text-fragment.\n    ```python (pseudo)\n    def updateOutOfDate():\n      for fragment in projectService.textFragments:\n        outOfDateTransformers = []\n        for transformer in cybertronService.transformers:\n          if transformer.cache.isOutOfDate(fragment.key):\n            outOfDateTransformers.push(transformer)\n        if len(outOfDateTransformers) == len(cybertronService.transformers): #all, so fragment is fully out-of-date\n          projectService.markOutOfDate(fragment)\n        elif len(outOfDateTransformers) > 0:\n          fragment.outOfDateTransformers = outOfDateTransformers\n          projectService.markOutOfDate(fragment)\n        else:\n          fragment.isOutOfDate = False\n    ```\n  - markDirty():\n    ```python\n    def markDirty():\n      if this.loading: return # need this to prevent the project from being saved again after opening\n      projectService.setIsDirty(True)\n      if projectService.autoSave and projectService.filename and not this.saveTimer:\n        this.saveTimer = setTimeout(() => {\n          this.save(projectService.filename)\n        }, 5000)\n\n    ```\n  - save(file): saves the project to disk\n    ```python (pseudo)\n    async def save(file):\n      if not projectService.filename and folderService.folder: # not yet saved, but did some building, so temp files\n        folderService.moveTo(file)\n      elif projectService.filename and projectService.filename != file:\n        folderService.copyTo(file)\n      elif not folderService.folder:\n        folderService.init()\n      await fs.writeFileASync(file, projectService.content, 'utf8')\n      for transformer in cybertronService.transformers:\n        await transformer.cache.saveCache()\n      await this.saveModelsMap(file)\n      await this.saveProjectConfig(file)\n      projectService.filename = file\n      projectService.setIsDirty(False)\n      this.saveTimer = None\n    ```\n  - saveModelsMap(file): \n    - build the json file name by replacing '.md' wit '_models.json' at the end of the field 'file'\n    - convert the json object in `gptService.modelsMap` to a string\n    - save the stringified json to the json file name\n  - saveKeys(file): \n    - build the json file name by replacing '.md' wit '_keys.json' at the end of the field 'file'\n    - get the dictionary from `keyService.getLocations()` and convert the json object to a string\n    - save the stringified json to the json file name\n  - saveProjectConfig(file): \n    - json file name = folderService.projectConfig\n    - convert the json object in `projectConfigurationService.config` to a string\n    - save the stringified json to the json file name\n\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"3cd6abe1-d84e-41c4-a421-07a63d196280":{"result":["ChangeProcessorService","ProjectService","LineParser","StorageService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nchange-processor service\n- the change-processor service is responsible for processing changes in the project content so that the project structure remains in sync with the source.\n- functions:\n  - static process(changes, full): makes certain that the project service remains in sync when the user performs edits. in pseudo:\n  ```python (pseudo)\n    def process(changes, editor):\n      projectService.content = editor.getValue()\n      model = editor.getModel()\n      for change in changes:\n        cleanedText = change.text.replace(/\\r/g, '') # remove carriage returns\n        lines = cleanedText.split('\\n')\n        curLine = change.range.startLineNumber - 1\n        lineEnd = change.range.endLineNumber - 1\n        lineIdx = 0\n# first replace lines that are overwritten. change can contain only part of line so get full line\n        if cleanedText.length > 0 or (change.rangeLength > 0 and curLine === lineEnd):\n          while lineIdx < len(lines) and curLine <= lineEnd:\n            lineParser.parse(model.getLineContent(curLine + 1), curLine)\n            lineIdx += 1\n            curLine += 1\n# now there are either lines to delete or to insert\n        while curLine < lineEnd:\n          lineParser.deleteLine(lineEnd) # need to do in reverse otherwise the wrong line is removed\n          lineEnd -= 1\n        if curLine == 0 and lineEnd === 0:\n          LineParser.parse(model.getLineContent(1), 0)\n        if cleanedText.length > 0: # only insert if there is text (split of empty string gives array with 1 empty string)\n          while lineIdx < len(lines):\n            LineParser.insertLine(model.getLineContent(curLine + 1), curLine)\n            lineIdx += 1\n            curLine += 1\n        storageService.markDirty()\n  ``` \n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"8c9e5644-55a8-44c2-ac7b-6fdea2680697":{"result":["FolderService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nfolder service\n- the folder service is a global singleton, responsible for managing the location of the currently active project.\n- it has:\n  - folder: the current root folder of the project (this folder contains the project file)\n  - project-name: the name of the currently active project. if no name has been provided, use 'new project'\n  - project-file: folder + project name + '.json'\n  - cache: sub-folder of the root folder = folder + '\\cache'\n  - project-config: configuration file that accompanies the project = folder + project name + '_config.json'\n  - plugins: sub-folder of the root folder = folder + '\\plugins'. This folder does not have to exist\n  - pluginsOutput: sub-folder of the plugins folder = plugins + '\\output'. This is a prop that dynamically builds the result\n  - output: sub-folder of the root folder = folder + '\\output'. This folder does not have to exist\n- it can:\n  - clear: called when a new project is created and the location & name is not yet known.\n    - reset folder to null\n    - create a temp name, set as project name\n  - init: called when the project folders need to be initialized.\n    - if this.folder is null: create a temp folder and assign to this.folder\n    - create the cache folder if  it doesn't exist yet\n    - create the output folder if  it doesn't exist yet\n    - calculate the value for 'plugins', but don't try to create the folder\n  - move to (new project file): moves the current project and related files to the new location\n    - split 'new project file' into new-folder and new-project name (remove extension .md)\n    - move the file project-file (if it exists) to the 'new project file'\n    - build the new project config : new-folder + new-project-file + '_config.json'\n    - move the configuration file (if it exists) to the new project config location.\n    - create a new cache folder at new-folder + '\\cache', if this folder doesn't already exist\n    - move all files from the cache (if it exists) to the new-cache-folder location\n    - if the plugins folder exists in the current project:\n      - create a new plugins folder at new-folder + '\\plugins', if this folder doesn't already exist\n      - move all the files and sub-folders (recursively) to the new-plugins-folder location\n    - if the output folder exists in the current project:\n      - create a new output folder at new-folder + '\\output', if this folder doesn't already exist\n      - move all the files and sub-folders (recursively) to the new-output-folder location\n    - store the new folder and project name\n  - copy (new project file): saves the current project to a new location.\n    - split 'new project file' into new-folder and new-project name (remove extension .md)\n    - copy the file project-file (if it exists) to the 'new project file'\n    - build the new project config : new-folder + new-project-file + '_config.json'\n    - copy the configuration file (if it exists) to the new project config location.\n    - create a new cache folder at new-folder + '\\cache', if this folder doesn't already exist\n    - copy all files from the cache (if it exists) to the new-cache-folder location\n    - if the plugins folder exists in the current project:\n      - create a new plugins folder at new-folder + '\\plugins', if this folder doesn't already exist\n      - copy all the files and sub-folders (recursively, use fs.cpSync) to the new-plugins-folder location\n    - if the output folder exists in the current project:\n      - create a new plugins folder at new-folder + '\\output', if this folder doesn't already exist\n      - copy all the files and sub-folders (recursively, use fs.cpSync) to the new-output-folder location\n    - store the new folder and project name\n  - set location (location)\n    - store the new folder and project name\n      - this.folder = path.dirname(location)\n      - this.projectName = path.basename(location)\n      - this.init()\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"7ed49936-ac3f-4a7c-a70d-8ccd51b1c327":{"result":["SelectionService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nselection service\n- The selection service is a global singleton object that keeps track of the currently selected text.\n- the selection service keeps track of the currently active editor (an object from the monaco editor npm package)\n- the service can be monitored for changes in the selection.\n- supports the following actions / functions:\n  - cut: if there is a reference to an editor, focus it and ask the monaco editor to cut the selected text to the clipboard.\n  - copy: if there is a reference to an editor, focus it and ask the monaco editor to copy the selected text to the clipboard.\n  - paste: if there is a reference to an editor, focus it and ask the monaco editor to paste the clipboard content at the current cursor position.\n  - delete: if there is a reference to an editor, focus it and ask the monaco editor to replace the selected text with an empty value:\n    ```javascript\n      var selection = this.editor.getSelection();\n      var id = { major: 1, minor: 1 };             \n      var text = \"\";\n      var op = {identifier: id, range: selection, text: text, forceMoveMarkers: true};\n      this.editor.executeEdits(\"my-source\", [op]);\n    ```\n  - clear selection: if there is a reference to an editor, ask the monaco editor to clear the current selection.\n  - select all: if there is a reference to an editor, ask the monaco editor to select all the text.\n  - hasSelection: returns true if there is an editor and it has a non-empty selection\n  - getCurrentStyle: return the type of the currently selected line. This is done by checking the comparing the start of the line (after trimming) with all the possible markdown values (heading1, heading2, ..., heading6, code, quote,..) \n\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"d0b23425-dc3b-46f2-92c5-451b2b648400":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nundo service\n- The undo service is a global singleton that keeps track of all the text edits that the user performs on the various monaco-editors.\n- It has an undo and redo list.\n- don't freeze the global object\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"958692be-22c0-452b-90ac-6c36a431fafd":{"result":["KeyService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nkey service\n- the Key service is responsible for creating and loading UUID keys for text-fragment.\n- to map a key to a text fragment during loading, the location of the text fragment within the text is used.\n- A text fragment's location is a string built up out of the sequence of titles of all the parent text fragments in the project, concatenated with ' > '. ex: 'root > title1 > subtitle > item'. \nUse the 'calculateLocation' function to build this string.\n- fields:\n  - loadUuidFromLocs: a dictionary, when assigned, indicates that the project is being loaded and these uuids should be used.\n- functions:\n  - assignKey(fragment, index): \n    - if there is a loaduuidFromLocs dict, \n      - create the location, \n      - search the location, \n      - if it exists: \n        - assign the uuid to the fragment and remove the entry from the dict so that we know this was a valid key.\n    - if  there is no loaduuidFromLocs dict or the location wasn't in the dict:\n      - create a new UUID key and assigns the key to the fragment. \n  - getLocations(): creates a dictionary of location - key pairs from the project service's fragments list and returns it. \n  - calculateLocation: for calculating the key of a text-fragment. It accepts as input a text-fragment and the index position of that text-fragment in the project. it goes as follows:\n    - if the index position is not provided, get the index from `projectService.textFragments.indexOf(fragment)`\n    - the current depth = the depth-level of the text-fragment\n    - the result value = the title of the text-fragment\n    - loop from the given index position until 0 using the field idx\n      - prev-fragment = the text-fragment that the project-service has at position 'idx' `ProjectService.textFragments[idx]`\n      - if there is a prev-fragment and the depth-level of the prev-fragment is smaller then the current depth:\n        - store the new current depth\n        - prepend the title of the prev-fragment + ' > ' to the result\n        - if the new current depth == 1, stop the loop\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"31da607d-07e2-4c54-9b1c-9a11a786c58f":{"result":["LineParser","TextFragment","ProjectService","KeyService","LineParserHelpers"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nline parser\n- the line-parser service is a global singleton object used to parse markdown lines and update the the text-fragments stored in the project-service.\n- It has:\n  - fragmentIndex: the line-parser service maintains an array of text-fragment objects. When the service is created, this list is empty.\n  - createTextFragment: a function for creating new text-fragments (json objects). it accepts as input a string which is the line that is being processed and the index nr at which the object should be placed.\n    - trim the line and convert it to lower case.\n    - count the nr of '#' that are in front of the title and assign to the depth-level of the text-fragment. so '#' is level 1, '##' is level 2, '###' is level 3 and so on.\n    - remove all the '#' from the line, trim again (to remove any spaces at the front) and assign to the title value of the text-fragment.\n    - set the 'is-out-of-date' flag to true, indicating that this fragment hasn't been processed yet\n    - initialize an empty array for the 'lines' field\n    - initialize an empty array for the 'outOfDateTransformers'\n    - ask the key-service to assign a key to the text-fragment `assignKey(textFragment, index)`.\n    - ask the project-service to add the text-fragment in it's list of text-fragments (projectService.addTextFragment(textFragment, index)).\n    - do not add to the fragmentsIndex (is done separately)\n    - return textFragment\n  - clear: clear the fragmentsIndex list.\n  - getStartLine(fragment): `return this.fragmentsIndex.indexOf(fragment)`\n  - pseudo code for the parse function and related:\n    ```python (pseudo)\n\n      def parse(line, index):\n        trimmedLine = line.trim()\n        if trimmedLine == '':\n          lineParserHelpers.handleEmptyLine(this, index)\n        elif trimmedLine.startsWith('#'):\n          lineParserHelpers.handleTitleLine(this, trimmedLine, index)\n        else:\n          if line[-1] == '\\r':\n            line = line[:-1]\n          lineParserHelpers.handleRegularLine(this, line, index) # keep the full line with spaces cause it's regular text\n\n      def insertLine(line, index):\n        this.fragmentsIndex.insert(index, null)\n        this.parse(line, index)\n\n      def deleteLine(index):\n        lineParserHelpers.deleteLine(this, index)\n        del this.fragmentsIndex[index]\n    ```\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"3fdc58f1-93e1-4eb2-8e18-9be3282323a1":{"result":[],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nline parser helpers\n\nThe module 'LineParserHelpers' contains the following helper functions used by the line parser service, described in pseudo code:\n\n    ```python (pseudo)\n\n      def getFragmentAt(service, index):\n        curFragment = service.fragmentsIndex[index]\n        while not curFragment and index >= 0:\n          index -= 1\n          curFragment = service.fragmentsIndex[index]\n        if curFragment and index > 0:\n          while index > 0 and service.fragmentsIndex[index-1] == curFragment:\n            index -= 1\n        return curFragment, index\n\n\n      def handleEmptyLine(service, index):\n        fragmentsIndexEmpty = service.fragmentsIndex.length == 0 or service.fragmentsIndex.find(t => t==null)?.length == service.fragmentsIndex.length\n        if fragmentsIndexEmpty:\n          while service.fragmentsIndex.length <= index:\n             service.fragmentsIndex.push(null)\n        else:\n          fragment, fragmentStart = getFragmentAt(service, index)\n          if not fragment:\n            raise Exception('internal error: no fragment found in non empty index table')\n          if index == fragmentStart:\n            this.removeFragmentTitle(service, fragment, null, index)\n          else:\n            fragmentLineIndex = index - fragmentStart - 1\n            while fragment.lines.length < fragmentLineIndex:\n              fragment.lines.push('')\n              service.fragmentsIndex[fragmentStart + fragment.lines.length] = fragment\n            if fragment.lines.length > fragmentLineIndex:\n              fragment.lines.insert(fragmentLineIndex, '')\n              service.fragmentsIndex[index] = fragment\n\n\n      def updateFragmentTitle(service, fragment, line):\n        line = line.trim().toLowerCase()\n        fragment.depth = line.split('#').length - 1\n        fragment.title = line.replace(/#/g, '').trim();\n        eventParams = { fragment }\n        projectService.dispatchEvent('title-changed', eventParams)\n\n\n      def removeFragmentTitle(service, fragment, line, index):\n        prevFragment, prevIndex = getFragmentAt(service, index-1)\n        if not prevFragment: # title of first was removed, set title to empty\n          if line:\n            fragment.lines.insert(0, line)\n          updateFragmentTitle(service, fragment, '')\n        else:\n          if line:\n            prevFragment.lines.push(line)\n#copy all the lines to the previous fragment\n          for l in fragment.lines:\n            prevFragment.lines.push(l)\n# update the index cause the fragment will be replaced by the previous\n          while (service.fragmentsIndex[index] == fragment):\n            service.fragmentsIndex[index] = prevFragment\n            index += 1\n          projectService.deleteTextFragment(fragment)\n          projectService.markOutOfDate(prevFragment)\n\n\n      def insertFragment(service, fragment, fragmentStart, line, fragmentPrjIndex, index):\n        toAdd = service.createTextFragment(line, fragmentPrjIndex)\n        service.fragmentsIndex[index] = toAdd\n        localIndexOfNewFragment = index - (fragmentStart + 1) # add 1 to fragment start for the title\n# the index of the new fragment local to the previous now contains a title instead of line, so remove\n        if localIndexOfNewFragment < fragment.lines.length:\n          fragment.lines.deleteAtIndex(localIndexOfNewFragment)\n#everything that came after local-index needs to be copied to the new fragment\n          while localIndexOfNewFragment < fragment.lines.length:\n            index += 1\n            service.fragmentsIndex[index] = toAdd\n            toAdd.lines.insert(0, fragment.lines.pop())\n        projectService.markOutOfDate(fragment)\n\n\n      def isInCode(fragment):\n        linesStartingWithCode = 0\n        for line in fragment.lines:\n          trimmed = line.trim()\n          if trimmed.startsWith('```'):\n            linesStartingWithCode += 1\n        return linesStartingWithCode % 2 == 1\n\n\n      def handleTitleLine(service, line, index):\n        fragment, fragmentStart = getFragmentAt(service, index)\n        if (fragmentsIndex.length == 0 or fragmentsIndex.length < index or fragmentsIndex[index] == null) and (not fragment or not isInCode(fragment)):\n          toAdd = service.createTextFragment(line, projectService.textFragments.length)\n          while service.fragmentsIndex.length <= index:\n             service.fragmentsIndex.push(null)\n          service.fragmentsIndex[index] = toAdd\n        else:\n          if not fragment:\n            raise Exception('internal error: no fragment found in non empty index table')\n          fragmentPrjIndex = projectService.textFragments.indexOf(fragment)\n          if fragmentStart == index:\n            updateFragmentTitle(service, fragment, line)\n          elif isInCode(fragment):\n            handleRegularLine(service, line, index)\n          else:\n            insertFragment(service, fragment, fragmentStart, line, fragmentPrjIndex + 1, index)\n\n\n      def updateFragmentLines(service, fragment, line, index, fragmentStart):\n        fragmentLineIndex = index - fragmentStart - 1 # extra - 1 cause the text starts at the line below the title\n        isChanged = True\n        if fragmentLineIndex < fragment.lines.length: # changing existing line\n          isChanged = fragment.lines[fragmentLineIndex] !== line\n          fragment.lines[fragmentLineIndex] = line\n        else:\n          while fragment.lines.length < fragmentLineIndex:\n            service.fragmentsIndex[fragmentStart + fragment.lines.length] = fragment\n            fragment.lines.push('')\n          fragment.lines.push(line)\n          service.fragmentsIndex[index] = fragment\n        if isChanged:\n          projectService.markOutOfDate(fragment)\n\n\n      def handleRegularLine(service, line, index):\n        fragment, fragmentStart = service.getFragmentAt(index)\n# no fragment yet at this line or in front of it, create new one\n        if not fragment:\n          toAdd = service.createTextFragment('', 0)\n          toAdd.lines.push(line)\n          while service.fragmentsIndex.length <= index:\n             service.fragmentsIndex.push(null)\n          service.fragmentsIndex[index] = toAdd\n        elif fragmentStart == index and fragment.title: # went from title to regular\n          removeFragmentTitle(service, fragment, line, index)\n        else:\n          updateFragmentLines(service, fragment, line, index, fragmentStart)\n\n\n      def deleteLine(service, index):\n        fragment, fragmentStart = service.getFragmentAt(index)\n        if fragment:\n          if fragmentStart == index: # fragment is being removed. if it still has lines, copy to prev, if no prev, leave with no title\n            removeFragmentTitle(service, fragment None, index)\n          else:\n            del fragment.lines[index - fragmentStart - 1]\n\n    ```\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"45fd1335-5429-47ea-a577-c11db18a28a0":{"result":["PositionTrackingService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nposition-tracking service\n- the position-tracking service is a global singleton object responsible for tracking the text-fragment and transformer that the user is currently working on / with.\n- The service keeps track of:\n  - the currently selected line nr\n  - the text-fragment related to the currently selected line. This is an object that can be assigned (property: activeFragment). When this value changes, an event needs to be raised so that other parts of the application can move to the new active fragment.\n  - a reference to the currently active transformer. This is used to run a build only for the active transformer (field: activeTransformer)\n  - an eventTarget that stores the events which monitor changes in the currently selected text-fragment.\n- it provides the following methods:\n  - setCurrentPos: set currently selected line and column, input: pos.\n    - col-index = pos.column - 1\n    - line-index = pos.lineNumber - 1\n    - if the new line-index is different from the currently stored line index:\n      - get the object at the line-index position found on the fragmentsIndex array of the line-parser service.\n        - if undefined was found, try again with `lineIndex - 1`. (This is because when adding an empty line at the end, no text-fragment index is kept for as long as the line remains empty) \n      - If this object differs from currently selected text-fragment, then store the object as the new currently selected text-fragment and trigger the 'change' event for all the registered event handlers, passing the text-fragment as event data.\n    - trigger the 'pos-changed' event for all the registered event handlers so that components that need to be updated at every position change, can be updated\n  - clear:\n    - set activeFragment & currentLine to null\n  - setActiveFragment(fragment):\n    ```python\n      if not this.activeFragment == fragment:\n        startPos = lineParser.getStartLine(fragment)\n        if startPos > -1:\n          event = new CustomEvent('moveTo', {detail: startPos + 1})\n          this.eventTarget.dispatchEvent(event)\n\n    ```\n  - setActiveTransformer(transformer): called when the user selected a different transformer\n    ```python\n      if not this.activeTransformer == transformer:\n        this.activeTransformer = transformer\n        event = new CustomEvent('change', {detail: transformer})\n        this.eventTarget.dispatchEvent(event)\n\n    ```\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"68dbb9c3-e1a8-4287-b68a-db5070e55505":{"result":["LogService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nlog service\n- the log service is a global singleton that is responsible for keeping track of messages that should be shown to the user.\n- fields:\n  - eventTarget: a field used to dispatch events.\n- properties:\n  - showLogWindow: when set:\n    - call  `window.electron.showLogWindow(value)`\n    - trigger the `log-window-visibility` event through the 'eventTarget' field\n- functions:\n  - beginMsg(transformerName, fragmentKey, inputData): \n    - creates a gpt msg log item, \n    - convert the fragmentKey to a location using `keyService.calculateLocation(ProjectService.getFragment(fragmentKey))`\n    - store all the data and assigns a UUID to the log object. \n    - if in debug mode (buildService.debug), then make certain that the log window is open\n    - This log object is then serialized to a string (pretty print) and send to the log window using the global function `window.electron.logMsg`. \n    - Finally returns the log object.\n  - logMsgResponse(logObj, response): creates an object containing the response and the UUID field of the logObj, serializes this object and sends it to the log window using `window.electron.logMsg`. If in debug mode (buildService.debug), then make certain that the log window is open\n  - setLogWindowVisibility: a function that \n    - should be registered as a callback with `window.electron.onLogWindowVisibility`, unregistered using `window.electron.removeOnLogWindowVisibility`\n    - when called:\n      - don't call `window.electron.showLogWindow(value)` cause the window is reporting it's new state\n      - update the internal state of showLogWindow\n      - trigger the `log-window-visibility` event through the 'eventTarget' field\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"0136ea45-e1de-4444-b833-2d8cfd2cc956":{"result":["GPTService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\ngpt service\n- the GPT service is a global singleton that is responsible for communicating with the open-ai api backend. It is primarily used by transformers that perform more specific tasks.\n- the service uses:\n  - the openai node.js library to communicate with the backend.\n  - the js-tiktoken library for calculating the token size of the input.\n- defaultModel: stores the default model to use during api calls.\n  - setDefaultModel: store the default model in the field & in localStorage\n  - getDefaultModel: return the field\n  - during construction, load the defaultModel from localStorage\n- modelMaxSize: json dictionary containing max token size info for known models. Loaded during construction\n- onMarkDirty: a field that optionally contains a callback that gets called when the modelsMap changes\n- modelsMap: a field (initialized as dictionary), stores which model should be used for individual transformers and also per transformer, for each individual text-fragment.\n  - setModelForTransformer(model, transformer): assign a model to a transformer:\n    ```python\n      if not transformer.name in this.modelsMap:\n        map = {}\n        this.modelsMap[transformer.name] = map\n      else:\n        map = this.modelsMap[transformer.name]\n      map['__default'] = model\n      if onMarkDirty:\n        onMarkDirty()\n    ```\n  - getModelForTransformer(transformer): `return this.modelsMap[transformer.name]?.['__default']`\n  - getModelOptions(model): return a dict containing the field maxTokens: if the dictionary `modelMaxSize` exists, try to get the value with the `model` as key, or use 4096 as default.\n  - setModelForFragment(model, transformer, key): assign a model to a transformer:\n    ```python\n      if not transformer.name in this.modelsMap:\n        map = {}\n        this.modelsMap[transformer.name] = map\n      else:\n        map = this.modelsMap[transformer.name]\n      map[key] = model\n      if onMarkDirty:\n        onMarkDirty()\n    ```\n  - getModelForFragment(transformer, key): `return this.modelsMap[transformer.name]?.[key]`\n- removeJSONBlockWrapper(str): remove the markdown json code block from start and end of string.\n- sendRequest: other services (or components) can call to send an api request to open-ai.\n  - function parameters:\n    - transformer: the transformer that is calling the function\n    - fragmentKey: the key of the fragment that is being processed\n    - messages: json objects that contain a `role` and `content` field.\n  ```python\n    if not this.openai:\n      return\n    model = this.getModelForRequest(transformer.name, fragmentKey)\n    tokens = this.calculateTokens(messages, model)\n    inputData = {\n      model: model,\n      messages: messages,\n      max_tokens: Math.round(transformer.calculateMaxTokens(tokens, this.getModelOptions())),\n      temperature: transformer.temperature or 0\n    }\n    config = {\n      maxRetries: 3,\n    }\n    logMsg = logService.beginMsg(transformer.name, fragmentKey, inputData)\n    await BuildService.tryPause()\n    response = await this.openai.chat.completions.create(inputData, config)\n    reply = None\n    if response:\n      reply = response.choices[0]?.message?.content\n      if transformer.isJson:\n        try:\n          reply = JSON.parse(removeJSONBlockWrapper(reply))\n        except(err):\n          dialogService.showError('Failed to convert result to json', err)\n    await logService.logMsgResponse(logMsg, reply)      \n    await BuildService.tryPause()\n    return reply\n  ```\n- getModelForRequest: search for the model to use in the modelsMap dictionary:\n  ```python\n  def getModelForRequest(transformerName, fragmentKey):\n    if transformerName in this.modelsMap:\n      section = this.modelsMap[transformerName]\n      if fragmentKey in section:\n        return section[fragmentKey]\n      if '__default' in section:\n        return section['__default']\n    return this.getDefaultModel()\n  ```\n- calculateTokens(messages, model): calculates the nr of tokens used by the input message using the  function getEncoding from the js-tiktoken library\n  ```python\n    result = { total: 0 }\n    encoding = getEncoding(model)\n    for message in messages:\n      result[message.role] = len(encoding.encode(message.content))\n      result.total += result[message.role]\n    return result \n  ```\n- getModels: a method to retrieve the list of available models. \n  - To retrieve this list, the openai nodejs library is used. `(await this.openai.models.list())?.data?.map((model) => model.id) ?? [];`\n  - only try to retrieve the list of models if there is a key available\n  - if there is no key available, show a dialog message to the user asking him to provide a valid open-ai api key. Only ask 1 time. Return an empty list.\n  - sort the list\n  - after retrieving the list from openai, store in local variable. if this variable is set, return this instead of retrieving the value.\n- apiKey: stores the api key to use when creating the openAI object.\n  - load from localStorage (globally available) during construction of the service\n- setApiKey: updates the api key\n  - save to localStorage\n  - recreate openAI object `new OpenAI({apiKey, dangerouslyAllowBrowser: true})`.\n  - reset flag so errors can be shown again\n- only instantiate the OpenAI library if a valid apiKey is provided\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"96aad863-3686-497b-8638-99081b0c947e":{"result":["ResultCacheService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nresult-cache service\n- this service manages previously retrieved results for transformers.\n- for each transformation that the transformer creates, the cache stores: \n  - the result of the transformation\n  - a state to keep track if the result has become out of date or not (any of the inputs of the transform operation has changed).\n  - the input that was used to generate the output. this is used to verify if the result has become out-of-date or not. This is an array of json objects.\n- because some transformers use data from the project directly and others use the results of other transformers, the result cache must be able to monitor changes in a project service and result-caches of other transformers.\n- A transformer that wants to cache it's results uses an instance of this class to perform these tasks on it's results.\n- internally, the cache uses a dictionary that maps the keys to their results.\n- whenever the transformer calculates a result, it asks the cache to update it's dictionary by calling 'setResult'.\n- the cache stores the results in a json file (saveCache).\n  - if the 'is-dirty' flag is not set, no need to save the results\n  - file writes are done async. \n  - after saving the cache, the 'is-dirty' flag is reset.\n  - the name of this file is specified as follows: `FolderService.projectName + transformer.name` (the transformer is a constructor parameter, store a ref to the transformer for later usage)\n  - the location of the file (folder) is provided by folder-service.cache\n  - the json file contains:\n    - the primary dictionary that contains the results.\n    - the secondary dictionary that contains the relationships between keys of text-fragments and full dictionary entries in the primary dict (which can consist out of multiple keys cause 1 result value can have multiple inputs).\n    - a third dictionary that contains all the overwritten values of the results (if any)\n    - a date that specifies the last save date of the project file. This is used when loading the dictionary back from file to verify if the results are still valid or not (when this date doesn't match the last-modified date of the project, something is out-of sync and consider the results in the file out-of-date).\n  - the cache tries to load this json file during construction of the instance. If the file doesn't exist, clearCache() is called to make certain that the cache is empty again.\n- When the result-cache-service is created, it:\n  - initializes the 'is-dirty' flag to false\n  - initialize eventTarget `this.eventTarget = new EventTarget()`\n- load(inputServices): a function that is called after construction to load the cache from file and register all the event handlers:\n  - registers the event handler 'handleFragmentDeleted' with the project service to monitor when a fragment is deleted\n    - register using pseudo: `projectService.eventTarget.addEventListener('fragment-deleted', handleFragmentDeleted)`\n  - registers an event handler with the project service to monitor when text fragments have changed\n    - register using pseudo: `projectService.eventTarget.addEventListener('fragment-out-of-date', handleTextFragmentChanged)`\n  - and registers the same event handler for the `result-changed` event with each of the inputServices (each service has a field 'cache')\n  - whenever the event handler is triggered (event.detail = fragment-key), the cache service checks in the secondary dictionary if there are any entries for that key. This allows the system to react to changes in single text-fragments, even though there were multiple input text-fragments (and so the keys in the primary dictionary are a concatenation of multiple titles).\n    - for each key in the list:\n      - search in the primary dictionary, if this contains an item for the key, store a reference to the item\n      - if not yet marked as out-of-date and `this.transformer.hasPromptChanged(key, item.prompt)`:\n        - mark as out-of-date\n        - set the 'is-dirty' flag\n        - if there are any other cache services that monitor this cache-service (instead of the project service directly), then let them know that the specified text-fragment (from the result) has gone out-of-date.\n    - after all items in the list have been processed, call projectService.tryAddToOutOfDate(fragmentKey, this.transformer)\n- the result-cache has a function to overwrite the result for a key. this overwritten text value is stored in the 'overwrites' dictionary, under the supplied key. When called, set the 'is-dirty' flag.\n- the result-cache has a function to retrieve the result for a particular key: the key is first searched in the 'overwrites' dictionary. if this has a result, return this value, otherwise try to return the value found in the results dictionary.\n- the result-cache has a function to retrieve if a text fragment is out-of-date or not (from the key): if the result is marked as out-of-date, returns true\n- clearCache(): a function to clear the cache, secondary cache & overwrites\n- handleFragmentDeleted: an event handler called when a fragment is deleted. in pseudo:\n  ```python (pseudo)\n  def handleFragmentDeleted(e):\n    fragmentKey = e.detail\n    this.deleteResultsFor(fragmentKey)\n# all values that are part of the result of another fragment, should also be deleted and the fragments marked out of date.\n    cacheKeys = this.secondaryCache[fragmentKey]\n    if cacheKeys:\n      for key in cacheKeys: \n        if this.cache[key].state != 'out-of-date':\n          this.cache[key].state = 'out-of-date'\n          keyParts = key.split(' | ')\n          outOfDateFragment = keyParts[0]\n          ProjectService.tryAddToOutOfDate(outOfDateFragment, this.transformer)\n      delete this.secondaryCache[fragmentKey]          \n      this.isDirty = True    \n  ```\n- deleteResultsFor(fragmentKey): all full-keys in the secondary cache for the specified key that start with that key, are deleted from the primary cache.\n  ```python\n    cacheKeys = this.secondaryCache[fragmentKey]\n    if cacheKeys:\n      leftOver = []\n      for key in cacheKeys:\n# we are only interested in the results of specified fragment, so it must be it's first key\n        if not key.startsWith(fragmentKey): \n          leftOver.push(key)\n          continue\n        delete this.cache[key]        \n        this.removeKeyFromSecondary(fragmentKey, key)\n        this.isDirty = True\n      if len(leftOver) > 0:\n        this.secondaryCache[fragmentKey] = leftOver\n      else:\n        delete this.secondaryCache[fragmentKey]\n  ```\n- removeKeyFromSecondary(forFragmentKey, key):\n  ```python\n    keyParts = key.split[' | ']\n    for part in keyParts:\n      if part != forFragmentKey:\n        refKeys = this.secondaryCache[part]\n        refKeys.remove(key)\n        if len(refKeys) == 0:\n          delete this.secondaryCache[part]\n  ```  \n- deleteAfterUpdate(fragmentKey, keysToRemove): removes the results that are no longer valid after an update for the fragment with the specified key.\n  ```python\n    allKeys = this.secondaryCache[fragmentKey]\n    for oldKey in keysToRemove:\n      if allKeys:\n        allKeys.remove(oldKey)\n      this.removeKeyFromSecondary(fragmentKey, oldKey)        \n      delete this.cache.cache[oldKey]\n  ```\n- getFragmentResults: a function to retrieve all the results related to a particular fragment. Definition in pseudo:\n  ```python (pseudo)\n  def getFragmentResults(fragmentKey):\n    if this.overwrites[key]: # entire fragment could be overwritten, if so, return this\n      return this.overwrites[key]\n    result = None\n    cacheKeys = this.secondaryCache[fragmentKey]\n    if cacheKeys:\n      for key in cacheKeys:\n# we are only interested in the results of specified fragment, so it must be it's first key\n        if not key.startsWith(fragmentKey): \n          continue\n        cacheValue = this.getResult(key)\n        keyParts = key.split(' | ')\n        addTo = None\n        if len(keyParts) > 1: \n          if not result: # if the result is already created, reuse so we can append values.\n            result = {}\n          addTo = result\n          for part in keyParts[1:-1]: # last is the key for the cache value, the first one is the key to the full value, also needs to be skipped\n            nextAddTo = None\n            if not part in addTo:\n              nextAddTo = {}\n              addTo[part] = nextAddTo\n            else:\n              nextAddTo = addTo[part]\n            addTo = nextAddTo\n        if addTo:\n          addTo[keyParts[-1]] = cacheValue\n        elif result:\n          if Array.isArray(result):\n            result.push(cacheValue)\n          else:\n            result = [result, cacheValue]\n        else:\n          result = cacheValue\n    return result\n  ```\n- setResult: stores the result in the cache. in pseudo:\n  ```python (pseudo)\n  def setResult(key, result, prompt):\n    isModified = True\n    if not key in this.cache:\n      this.cache[key] = { result, prompt, state: 'still-valid' }\n      keyParts = key.split(' | ')\n      for part in keyParts:\n        if not part in this.secondaryCache:\n          this.secondaryCache[part] = [key]\n        else:\n          this.secondaryCache[part].push(key)\n    elif this.cache[key].result != result:\n      this.cache[key].result = result\n      this.cache[key].state = 'still-valid'\n    elif this.cache[key].state != 'stil-valid':\n      this.cache[key].state = 'still-valid'\n    else:\n      isModified = False\n    if isModified:\n      this.isDirty = True\n      storageService.markDirty()\n      this.eventTarget.dispatchEvent(new CustomEvent('result-changed', { detail: key }))\n  ```\ngetResult(key): `if key in this.overwrites: return this.overwrites[key] else if key in this.cache: return this.cache[key].result else return null`\n- isOutOfDate(keyPart): checks if the specified key is present and marked as still-valid\n  ```python (pseudo)\n  def isOutOfDate(keyPart):\n    if keyPart in this.cache:\n      return this.cache[keyPart].state != 'still-valid'\n    if keyPart in this.secondaryCache:\n      for key in this.secondaryCache[keyPart]:\n        if this.cache[key].state != 'still-valid':\n          return True\n      return False\n    return True\n  ```\n- overwriteResult(key, value):\n  ```python\n    if value:\n      if this.overwrites[key] == value: return\n      this.overwrites[key] = value\n    else:\n      delete this.overwrites[key]\n    this.isDirty = true\n    this.eventTarget.dispatchEvent(new CustomEvent('result-changed', { detail: key }))\n    storageService.markDirty()\n  ```\n- isOverwritten(key): `return key in this.overwrites`\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"33a93cd2-11ee-4ec2-9263-101b212474ab":{"result":["BuildService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nbuild service\n- the build service is a global singleton that processes all the text-fragments of the project-service. It uses a set of transformers to iteratively generate conversions on the different text-fragments.\n- eventTarget: a field used to dispatch events.\n- showDebugger: a property, when set:\n  - call `window.electron.showDebugger(value)`\n  - trigger the `show-debugger` event through the 'eventTarget' field\n- async buildAll(transformer): to build the project, do:\n  - make certain that the folder service is initialized\n  - if `transformer.isFullRender` exists\n    - call `await transformer.getResults(ProjectService.textFragments)`\n  - otherwise: for each fragment in project-service.textFragments: \n     - `await transformer.getResult(fragment)`\n  - on error: `DialogService.showErrorDialog(error)`\n- async runTransformer(fragment, transformer):\n  - make certain that the folder service is initialized\n  - ask the transformer to get it's result (`getResult(fragment)`) (async)\n  - on error: `DialogService.showErrorDialog(error)`\n- debug: a property to indicate if the build service is currently in debug mode or not. Load the value from local storage upon creation. When the value is updated, save to local storage\n- isBuilding: a property to indicate if one of the build functions (buildAll, runTransformer, buildFragment) is currently running or not. These functions set isBuilding to true at the start and use a try-finally to make certain that the isBuilding flag is also turned to false at the end.\n  - set isBuilding: trigger the 'is-building' event through the 'eventTarget' field\n- isPaused: a property that gets wether currently paused or not. `!!this.debugResolver;`\n- tryPause: a method to pause execution until user presses continue or stop button, if in debug mode.\n  ```python\n    def tryPause():\n    if this.debug:\n      pause = new Promise((resolve, reject) => {\n        this.debugResolver = resolve\n        this.debugRejector = reject\n      })\n      this.eventTarget.dispatchEvent(new CustomEvent('is-pausing'))\n      await pause\n      this.eventTarget.dispatchEvent(new CustomEvent('has-resumed'))\n  ```\n- runNext: raise the debugResolver (if assigned) and reset to null    \n- stopRun: raise the debugRejector (if assigned) and reset to null\n- setDebuggerVisibility: a function that \n    - should be registered as a callback with `window.electron.onDebuggerVisibility`, unregistered using `window.electron.removeOnDebuggerVisibility`\n    - when called:\n      - don't call `window.electron.showDebugger(value)` cause the window is reporting it's new state\n      - update the internal state of showDebugger\n      - trigger the `show-debugger` event through the 'eventTarget' field\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"1056ce6a-ac4b-410e-91d3-f8117a6084b0":{"result":["BuildStackService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nbuild-stack service\n- the build-stack service is used during the build process to make certain that there are no circular references in the process. This occurs when a transformer depends on the result of another transformer that (eventually) again relies on the result of the first transformer, which can't be rendered yet.\n- fields:\n  - running = {} : a dictionary that keeps track of the textframe - transformer pairs that are currently running. Key calculation for the dict = transformer.name + textframe.key\n  - state = `normal`. A transformer can set this to `validating` when it wants to block calls to the llms when rebuilding the message to check if the input has changed (and the cached result has become out of date).\n- functions:\n  - tryRegister(transformer, fragment):\n    ```python\n    toSearch = fragment?.key + '-' + transformer?.name\n    if toSearch in this.running:\n      return False\n    this.running[toSearch] = True\n    if fragment:\n      ProjectService.markIsBuilding(fragment, transformer) # do here cause all transformers need to pass the stack\n    return True\n    ```\n  - unRegister(transformer, fragment):\n    ```python\n    toSearch = fragment?.key + '-' + transformer?.name\n    delete this.running[toSearch]\n    if fragment:\n      ProjectService.markUpToDate(fragment, transformer) # do here cause all transformers need to pass the stack\n    ```\n  - isRunning(transformer, fragment):\n    ```python\n    toSearch = fragment?.key + '-' + transformer?.name\n    return toSearch in this.running\n    ```\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"849a7ae4-6a95-43dd-9c90-6ef41dc86a80":{"result":["CybertronService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\ncybertron service\n- the cybertron-service is a global singleton that is responsible for managing the list of available transformers.\n- the service also maintains a list of entry-points: this is a sub-list of the available transformers which can be used as starting points for building text-fragments.\n- the field `activeEntryPoint` keeps track of the currently selected entrypoint, which is one of the transformers of the entryPoints list. \n- Transformers can be registered. this adds them to the list. A second parameter indicates if the transformer should also be added as an entry-point. If the field 'activeEntryPoint' is still empty and the transformer being registered, is an entrypoint, set it as the activeEntryPoint.\n- Transformers can also be unregistered. this will remove them from the list of available transformers and the list of entry-points.\n- getTransformer(name): search for the transformer with the specified name in this.transformers and return the result\n- load(): loads all the transformers\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"ccbe1be3-fea6-4080-bce3-e13de89e4e42":{"result":["AllSparkService","ConstantExtractorService","PluginRendererService","PluginListRendererService","ConstantsResourceRenderer","ParserValidatorService","PluginTransformerService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nall-spark service\n- the all-spark service is a global singleton that is responsible for creating all the transformers and registering them into the cybertron service. \n- fields:\n  - eventTarget: to register/unregister event handlers that monitor changes in the loaded transformers\n  - transformers: a dictionary that stores a reference to all the transformer objects that get created. The url from where the transformer is loaded from is used as the key. This is used to unregister transformers again.\n- functions:\n  - getPlugins: returns a list of plugin definitions\n    - if the list has not yet been loaded, call: `this.getPluginsList()`\n    - return this.plugins\n  - getPluginsList: If the current project contains a plugins folder, load the project-local file, otherwise load the globally available set of plugins.\n    ```python pseudo\n      pluginFolder = folderService.pluginsOutput\n      path = os.path.join(pluginFolder, 'plugins.json')\n      if not fs.existsSync(path):\n        resourcesPath = window.electron.resourcesPath\n        pluginFolder = path.join(resourcesPath, 'plugins')\n        path = os.path.join(pluginFolder, 'plugins.json')\n      if fs.existsSync(path):\n        plugins = fs.readSync(path)\n        this.plugins = json.parse(plugins)\n        for (i = 0; i < this.plugins.length; i+=1)\n          this.plugins[i] = path.join(pluginFolder, this.plugins[i]);\n      else:\n        this.plugins = []\n    ```\n  - refreshPlugins: unloads the old plugins, refreshes the list of plugins and loads all the new plugins\n    ```python\n      for plugin in this.plugins:\n        await this.unloadPlugin(plugin)\n      await this.getPluginsList() # forces a reload of the list\n      await this.loadPlugins()\n    ```\n  - loadPlugin(definition):\n    - do: `return global.require(definition)`\n    - wrap round try-catch. On error, show an error dialog.\n  - unloadPlugin(definition):\n    - do: \n      ```python\n        cybertronService.unregister(this.transformers[definition])\n        delete require.cache[definition]\n        delete this.transformers[definition]\n      ```\n    - wrap round try-catch. On error, show an error dialog.\n  - load: create the transformers and register them with the cybertron-service. \n    - This function is called after the application has loaded.\n    - don't run if `window.electron.isLogMode === true`\n    - to register, use: `cybertronService.register(transformer, false)`, to register as entry point, use: `cybertronService.register(transformer, true)`\n    - register every transformer after construction so that it can be found in the list by other transformers.\n    - transformers to create:\n      - constant-extractor service\n      - plugin-renderer service (entry point)\n      - plugin-list renderer service (entry point)\n      - constants-resource renderer (entry point)\n      - parser validator service\n    - call `await this.loadPlugins()`\n  - loadPlugins: when not in pluginMode (cause when in that mode, we are editing the plugins and can only use the built in ones), loads all the plugins and creates a transformer for each\n    - when `window.electron.isPluginMode == false and window.electron.isLogMode == false`:\n      - for every transformer url in this.getPlugins():\n        - pluginObj = this.loadPlugin(ul)\n        - create a new plugin-transformer service, with constructor param 'pluginObj'\n        - store a reference of the new plugin-transformer object in the 'transformers' dictionary, key: url so that we can unload it again if required.\n        - register plugin-transformer, to determine if it's an entry-point, use 'pluginTransformer.isEntryPoint'\n      - after all transformers are loaded, dispatch the event 'transformers-loaded'\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"421a1524-3e5c-431e-8444-470cae1d6cbb":{"result":["TransformerBaseService","ResultCacheService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\ntransformer-base service\n- The transformer-base service acts as a base class for transformers: it provides a common interface and functionality\n- constructor:\n  - name: the name of the transformer\n  - dependencies: a list of names of transformers.\n  - isJson: when true, the result values should be treated as json structures, otherwise as regular text.\n  - language: in which language the result data should be shown. if not provided, defaults to 'markdown'\n  - temperature: temp to use for the llm requests. defaults to 0\n  - isFullRender: when true, a renderResults function is available that performs a task on all fragments at once. Default = false.\n- this service uses a result-cache-service (field: cache) to store all the results and keep track of when the build has gone out-of-date. \n  - constructor params:\n    - transformer = this\n    - dependencies = this.dependencies\n- functions:\n  - load(): load the dependencies (the list of names of transformers) and create the cache. Replace every name in the list with the object found in the cybertron-service's list of transformers. If a name can not be found, raise an exception with the necessary info. Store the list of objects as 'dependencies'. Ask the Cybertron service and the cache object to load as well.\n  - renderResults(fragments): for transformers that require the entire project as input. throws a not-implemented error since inheritors need to supply this function.\n  - renderResult(textFragment): do a full rerender for the fragment\n    ```python (pseudo)\n    def renderResult(textFragment):\n      keyedMessage = await this.buildMessage(textFragment)\n      if not keyedMessage: \n        return None\n      message, keys = keyedMessage\n      result = await GPT-service.sendRequest(this, textFragment.key, message) # need name and key so the gpt service can select the correct model\n      if keys:\n        keys.insert(0, textFragment.key)\n      else:\n        keys = [textFragment.key]\n      key = ' | '.join(keys)\n      this.cache.setResult(key, result, message)\n      return result\n    ```\n  - hasPromptChanged(key, prompt): rebuilds the prompt that the transformer should send to the llm to calculate the result. This is used to check if the current result is out of date or not (when the prompt remains the same, the result is still valid).\n  ```python\n    buildStackService.mode = 'validating' # make certain that only cache values are used, no calls to the llm \n    try:\n      key = key.split(' | '))\n      args = this.keyToMessageParams(key) # some transformers require multiple parameters which need to be rebuild\n      keyedMessage = await this.buildMessage(*args)\n      if not keyedMessage: \n        return None\n      message, keys = keyedMessage\n      return JSON.stringify(message) != JSON.stringify(prompt) # structure and everything must remain the same\n    finally:\n      buildStackService.mode = 'normal'\n  ```\n  - keyToMessageParams(key): converts the key to text fragments when possible. This is used while checking if a result has gone out of date, to recreate the llm-prompt based on the latest values. If a transformer uses custom data for the parameters of the buildMessage parameters, these should be supplied here as well.\n    ```python\n      result = []\n      for part in key:\n        fragment = projectService.getFragment(part)\n        if fragment:\n          result.push(fragment)\n        else:\n          result.push(part)\n      return result\n    ```\n  - updateResult(fragment): only do an update if (part of) the cache is not up to date. allows for partial updates by descendent. not for external consumption cause it does not register the call with the build-stack.\n    ```python\n      if not this.cache.isOutOfDate(fragment.key):\n        return this.cache.getFragmentResults(fragment.key)\n      return this.renderResult(fragment)\n    ```\n  - getResult(fragment): get an up-to-date result value for the specified key. Use the cache when possible. This function should be used instead of updateResult cause it registers the call with the buildStack service and makes certain that only the cache is used when in validation mode.\n    ```python (pseudo)\n    async def getResult(fragment):\n      if buildStackService.mode == 'validating':\n          result = this.cache.getFragmentResults(fragment.key)\n      if not buildStackService.tryRegister(this, fragment):\n        return # circular reference, not good, stop the process\n      try:\n        result = await this.updateResult(fragment)\n        return result\n      finally:\n        buildStackService.unregister(this, fragment)\n    ```\n  - getResults(): get an up-to-date result value. This function should be used instead of updateResult cause it wraps\n    ```python (pseudo)\n    async def getResult():\n      if not buildStackService.tryRegister(this):\n        return # circular reference, not good, stop the process\n      try:\n        result = await this.renderResults()\n        return result\n      finally:\n        buildStackService.unregister(this)\n    ```\n  - calculateMaxTokens(inputTokens): calculate the maximum tokens for the llm to optimize speed and cost\n    ```python (pseudo)\n      totalInput = 0\n      for key, value in inputTokens.items():\n        totalInput += value\n      return totalInput * 2\n    ```\n  - buildMessage(textFragment): builds the message from the text fragment. throws a not-implemented error since inheritors need to supply this function.\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"32ab0827-4dc7-4078-bd8a-88ea9064239d":{"result":["ConstantExtractorService","TransformerBaseService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nconstant-extractor service\n- The constant-extractor service makes certain all constant definitions (between quotes) are extracted from the source code, rendered to a json file and replaced with references to the json-entries in the source texts.\n- inherits from transformer-base service. Constructor parameters:\n  - name: 'constants'\n  - dependencies: []\n  - isJson: true\n- functions:\n  - load: ask super to load and set the field `constantsService = this.dependencies[0]`\n  - extract-quotes: extract all the locations in the text that contain quotes\n  ```python (pseudo)\n    def extractQuotes(fragment):\n      key = fragment.key\n      lines = fragment.lines\n      quotes = []\n      current_quote = None\n      cur_lines = []\n      line_nr = 0\n      count = 0\n      for line in lines:\n          line = line.lstrip()\n          if line.startswith('>'):\n              line = line[1:] # remove the > \n              if len(line) > 0 and line[0] == ' ':  # and the space but leave everything else cause we want the exact quote\n                  line = line[1:]\n              cur_lines.append(line)\n              if not current_quote:\n# could be that the previous line was empty, in that case, start the quote a line earlier\n                  if line_nr > 0 and not lines[line_nr - 1].strip():\n                      current_quote = {'start': line_nr - 1}\n                  else:\n                      current_quote = {'start': line_nr}\n          elif not line and current_quote: # empty line so we need to close the quote\n              count += 1\n              collectResponse(current_quote, line_nr, cur_lines, fragment, count, quotes)\n              current_quote = None\n              cur_lines = []\n          line_nr += 1\n      if current_quote:\n          count += 1\n          collectResponse(current_quote, line_nr, cur_lines, fragment, count, quotes)\n      return quotes\n  ```\n  - collect-response: add a quote to the list of quotes\n  ```python\n    def collectResponse(toAdd, end, lines, fragment, count, quotes):\n      title = keyService.calculateLocation(fragment)\n      title = 'res_' + title.replaceAll(' > ', '_').replaceAll(' ', '_').replaceAll('-', '_').strip()\n      toAdd['end'] = line_nr\n      toAdd['lines'] = lines\n      toAdd['name'] = '{0}_{1}'.format(title, count)\n      quotes.append(current_quote)\n  ```\n  - render-result(pseudo):\n    ```python (pseudo)\n    def renderResult(textFragment):\n      result = this.extractQuotes(textFragment)\n      this.cache.setResult(textFragment.key, result, [*textFragment.lines]) # duplicate lines so that the cache has a local copy that doesn't change if the lines in the text fragment change\n      return result\n    ```\n  - get-result(key): get an up-to-date result value for the specified key. Use the cache when possible.\n    ```python (pseudo)\n    async def getResult(fragment):\n      quotes = []\n      if not this.cache.isOutOfDate(fragment.key):\n        quotes = this.cache.getFragmentResults(fragment.key)\n      elif BuildStackService.mode === 'validating':\n        quotes = this.extractQuotes(fragment)\n      else:\n        if not BuildStackService.tryRegister(this, fragment):\n          return\n        try:\n          quotes = await this.renderResult(fragment)\n        finally:\n          BuildStackService.unRegister(this, fragment)\n      if not quotes or len(quotes) == 0:\n        return fragment.lines.join('\\n')\n      else:\n        lines = fragment.lines\n        new_lines = []\n        consts = [*quotes] # make a copy of the list so we can remove items from it\n        current_const = consts.pop(0)\n        cur_line = 0\n        while cur_line < len(lines):\n            if current_const and cur_line == current_const['start']:\n# add the constant to the previous line\n                new_lines[-1] += f' the value of the constant resources.{current_const[\"name\"]}'\n                cur_line = current_const['end'] + 1\n                if len(consts) > 0:\n                    current_const = consts.pop(0)\n                else:\n                    current_const = None\n            else:\n                new_lines.append(lines[cur_line])\n                cur_line += 1\n        return new_lines.join('\\n')\n    ```\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"8ac6d3c7-0806-4d9f-a790-88bbb45f9106":{"result":["PluginTransformerService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nplugin-transformer service\n- the plugin-transformer service forms a wrapper round a javascript object that was provided by a plugin. \n  - The plugin provides the configuration info of the transformer\n  - The transformer asks the plugin to build the transformer's result and it allows the plugin the overwrite the default behavior at various points.  \n- inherits from transformer-base service.\n- constructor:\n  - parameters:\n    - plugin: object created by the plugin code that provides access to the functions that should be used\n  - if the plugin does not have a function `getDescription`, raise an error to indicate that the provided plugin is invalid and can't be used as a transformer\n  - do:\n  ```python\n    this.plugin = plugin\n    description = plugin.getDescription()\n    if not description:\n      raise Exception('Invalid plugin: no description provided')\n    super(description.name, description.dependencies, description.isJson, description.language, description.temperature or 0, description.isFullRender)\n    this.description = description\n    plugin.services.projectService = projectService\n    plugin.services.folderService = folderService\n    plugin.services.gptService = gptService\n    plugin.services.cybertronService = cybertronService\n    plugin.services.keyService = keyService\n    plugin.services.cache = this.cache\n  ```\n- load:\n  ```python\n    super.load()\n    for const dep in this.dependencies:\n      this.plugin.deps[dep.name] = dep\n    if this.plugin.load:\n      this.plugin.load()\n  ```\n- calculateMaxTokens(inputTokens)\n  ```python\n    if this.plugin.calculateMaxTokens:\n      return this.plugin.calculateMaxTokens(inputTokens)\n    return super.calculateMaxTokens(inputTokens)\n  ```\n- buildMessage(fragment): if not this.plugin.buildMessage: raise error else return this.plugin.buildMessage(fragment)\n- renderResults():\n  ```python\n    if this.plugin.renderResults:\n      return this.plugin.renderResults()\n    return super.renderResults(fragment)\n  ```\n- renderResult(fragment)\n  ```python\n    if this.plugin.renderResult:\n      result, message = this.plugin.renderResult(fragment)\n      this.cache.setResult(fragment.key, result, message)\n      return result\n    if this.plugin.iterator:\n      result = {}\n      def iteratorStepHandler(*args):\n        message, keys = await this.plugin.buildMessage(*args)\n        if not message:\n          return\n        if keys:\n          keys.insert(0, fragment.key)\n        else:\n          keys = [fragment.key]\n        itemResult = await GPTService.sendRequest(transformer, fragment.key, message)\n        if this.plugin.cleanResponse:\n          itemResult = this.plugin.cleanResponse(itemResult, *args)\n        key = keys.join(' | ')\n        this.cache.setResult(key, itemResult, message)\n        result[keys[-1]] = itemResult\n      this.cache.deleteResultsFor(fragment.key)\n      await this.plugin.iterator(fragment, iteratorStepHandler, result)\n      return result\n    else:\n      return super.renderResult(fragment)\n  ```\n- updateResult(fragment)\n  ```python\n    if this.plugin.updateResult:\n      return this.plugin.updateResult(fragment)\n    if this.plugin.iterator:\n      result = {}\n      oldResultKeys = this.cache.secondaryCache(fragment.key).filter(x => x.startsWith(fragment.key))\n      def iteratorStepHandler(*args):\n        message, keys = await this.plugin.buildMessage(*args)\n        if not message:\n          return\n        if keys:\n          keys.insert(0, fragment.key)\n        else:\n          keys = [fragment.key]\n        key = keys.join(' | ')\n        if this.cache.isOutOfDate(key):\n          itemResult = await GPTService.sendRequest(transformer, fragment.key, message)\n          if this.plugin.cleanResponse:\n            itemResult = this.plugin.cleanResponse(itemResult, *args)\n          this.cache.setResult(key, itemResult, message)\n        else:\n          itemResult = this.cache.getResult(key)\n        result[keys[-1]] = itemResult\n        oldResultKeys.remove(key)\n      await this.plugin.iterator(fragment, iteratorStepHandler, result)\n      this.cache.deleteAfterUpdate(fragment.key, oldResultKeys)\n    else:\n      return super.updateResult(fragment)\n  ```\n- hasPromptChanged(key, prompt): rebuilds the prompt that the transformer should send to the llm to calculate the result. This is used to check if the current result is out of date or not (when the prompt remains the same, the result is still valid).\n  ```python\n    if this.plugin.hasPromptChanged:\n      return this.plugin.hasPromptChanged(fragment, prompt)\n    if this.plugin.iterator:\n      result = {}\n      def iteratorStepHandler(*args):\n        message, keys = await this.plugin.buildMessage(*args)\n        if keys:\n          keys.insert(0, key)\n        else:\n          keys = [key]\n        newKey = keys.join(' | ')\n        if newKey == key and not isChanged:\n          isChanged = JSON.stringify(message) == JSON.stringify(prompt)\n        else:\n          itemResult = this.cache.getResult(key)\n        result[keys[-1]] = itemResult\n      buildStackService.mode = 'validating' # make certain that only cache values are used, no calls to the llm \n      try:\n        fragment = this.keyToMessageParams(key.split(' | '))[0]; # first item in the compound key is always the key of the fragment\n        this.plugin.iterator(fragment, iteratorStepHandler, result)\n        return isChanged\n      finally:\n        buildStackService.mode = 'normal'\n    else:\n      return super.updateResult(fragment)\n  ```\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"03c15033-710c-4035-8591-0017a7461ca9":{"result":["PluginRendererService","TransformerBaseService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nplugin-renderer service\n- The plugin-renderer service is responsible for translating a plugin definition into a javascript module.\n- Used to build plugin transformers that can be loaded and used by the application\n- inherits from transformer-base service. Constructor parameters for transformer-base:\n  - name: 'plugin renderer'\n  - dependencies: ['constants']\n  - isJson: false\n  - isFullRender: true\n- functions:\n  - load: ask super to load and set the field `constantsService = this.dependencies[0]`\n  - saveFile(fragment, content):\n    ```python\n      rootFolder = folderService.output\n      if not fs.existsSync(rootFolder):\n        fs.mkdirSync(rootFolder)\n      location = KeyService.calculateLocation(fragment)        \n      fileName = location.replaceAll(\" > \", \"_\").replaceAll(\" \", \"_\").replaceAll(\"-\", \"_\")\n      file_path = path.join(rootPath, fileName + \".js\")\n      with open(file_path, \"w\") as writer:\n        writer.write(content)\n      return file_path\n    ```\n  - cleanResult(content):\n    ```python\n      if content:\n        content = content.strip() # need to remove the newline at the end\n        if content.startswith(\"```javascript\"):\n          content = content[len(\"```javascript\"):]\n        if content.endswith(\"```\"):\n          content = content[:-len(\"```\")]\n        return content\n    ```\n  - renderResult(fragment):\n    ```python\n      location = keyService.calculateLocation(fragment)\n      haShared = ProjectService.textFragments.some(f => f.title === 'shared')\n      message, = await this.buildMessage(fragment, location.endsWith('> shared'), hasShared)\n      if not message:\n        return None\n      if not len(fragment.lines):\n        filename = ''\n      else:\n        result = await GPTService.sendRequest(this, fragment.key, message)\n        result = this.cleanResult(result)\n        filename = this.saveFile(fragment, result)\n      this.cache.setResult(fragment.key, filename, message)\n      return filename\n    ```\n  - buildMessage(fragment, asShared, hasShared):\n    - count the nr of non-empty lines in fragment.lines. When 0, return null\n    - if asShared:\n      - result (json array):\n        - role: system, content: the value of the constant resources.res_mark_services_transformers_plugin_renderer_service_1\n        - role: user, content: the value of the constant resources.res_mark_services_transformers_plugin_renderer_service_2\n          replace:\n          - {{content}}: `await this.constantsService.getResult(fragment)`\n    - if not asShared:\n      - result (json array):\n        - role: system, content: the value of the constant resources.res_mark_services_transformers_plugin_renderer_service_3\n          replace:\n          - {{sharedImport}}: hasShared ? `const shared = require('./shared.js');` : ''\n\n        - role: user, content: the value of the constant resources.res_mark_services_transformers_plugin_renderer_service_4\n          replace:\n          - {{title}}: `textFragment.title`\n          - {{content}}: `await this.constantsService.getResult(fragment)`\n    - return result, [ ]\n\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"9b56f8e2-0e81-4cce-9555-4f163eda2294":{"result":["PluginListRendererService","TransformerBaseService","FolderService"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nplugin-list renderer service\n- the plugin-list renderer service is responsible for generating a file containing all the plugins that need to be loaded.\n- Used to let the application know which files to load from where for the transformer-plugins.\n- inherits from transformer-base service. Constructor parameters for transformer-base:\n  - name: 'plugin-list renderer'\n  - dependencies: ['plugin renderer']\n  - isJson: true\n- set during construction: `this.isFullRender = true;`\n- functions:\n  - load: ask super to load and set the field `this.pluginRendererService = this.dependencies[0]`\n  - saveFile(items): saves the array to file\n    ```python\n      rootFolder = folderService.output\n      if not fs.existsSync(rootFolder):\n        fs.mkdirSync(rootFolder)\n      file_path = os.path.join(rootPath, \"plugins.json\")\n      with open(file_path, \"w\") as writer:\n        writer.write(content)\n    ```\n  - renderResults(fragments): builds the array of files, (a file for each fragment), provided by the plugin-renderer and saves it to the output folder.\n    ```python\n      items = []\n      outPath = folderService.output\n      for fragment in fragments:\n        item = await this.pluginRendererService.getResult(fragment)\n        if item and not item.endsWith('shared.js'):\n          item = path.relative(output, item)\n          items.append(item)\n        this.cache.setResult(fragment.key, item, item) # set the cache so the rest of the system know this transformer is up to date for the fragment\n      saveFile(items)\n    ```\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"15110a27-64e0-45a5-b6ac-23df16688604":{"result":["constants-resource renderer","transformer-base"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nconstants-resource renderer\n- The constants-resource renderer service is responsible for creating the resource file that contains all the constants that were found in the fragments.\n- Used to render the resource file most of the plugins rely on.\n- inherits from transformer-base service. Constructor parameters for transformer-base:\n  - name: 'constants resource renderer'\n  - dependencies: ['constants']\n  - isJson: true\n- set during construction: `this.constantsService = this.dependencies[0]; this.isFullRender = true`\n- functions:\n  - saveFile(items): saves the array to file\n    ```python\n      rootFolder = folderService.output\n      if not fs.existsSync(rootFolder):\n        fs.mkdirSync(rootFolder)\n      file_path = os.path.join(rootPath, \"resources.json\")\n      with open(file_path, \"w\") as writer:\n        writer.write(content)\n    ```\n  - renderResults(fragments): builds the json dictionary of constants and saves it\n    ```python\n      items = {}\n      for fragment in fragments:\n        fragmentItems = {}\n        constants = await this.constantsService.cache.getResult(fragment.key)\n        if constants:\n          for constant in constants:\n            text = '\\n'.join(items.lines)\n            items[constant.name] = text\n            fragmentItems[constant.name] = text\n        this.cache.setResult(fragment.key, fragmentItems, fragmentItems)\n      await saveFile(items)\n    ```\n"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]},"99052aeb-ef71-4cdb-ba64-1036a33417cc":{"result":["parser validator service","transformer-base service"],"prompt":[{"role":"system","content":"Act as an ai software analyst.\nIt is your task to find all the classes that are declared in the user text.\ndevelopment stack\n- developed in javascript (ES6)\n- it uses electron as it's runtime\n- The UI is built using react and antd\n\n\nDo not include UI components, but only list the classes that need to be custom built.\nreturn an empty array if you can't detect any classes.\ndon't include any introduction. Don't include any explanation, just write the list of classes as a json array."},{"role":"user","content":"list all the classes declared in:\nparser validator service\n- The parser-validator service is used to verify the internal markdown parser. It simply takes a copy of the current state of the text related to the specified text-fragment. (does not make use of any llm)\n- Used to debug the application\n- inherits from transformer-base service. Constructor parameters for transformer-base:\n  - name: 'parser validator'\n  - dependencies: []\n  - isJson: false\n- functions:\n  ```python\n    def renderResult(fragment):\n      result = '\\n'.join(fragment.lines)\n      this.cache.setResult(key, result, [*fragment.lines])\n      return result\n  ```"}],"state":"still-valid","additionalKeys":["7bff2308-d88b-408e-8082-7f7034afa59e"]}},"secondaryCache":{"80a81923-8079-4820-b50c-5cd3df1b12e1":["80a81923-8079-4820-b50c-5cd3df1b12e1"],"7bff2308-d88b-408e-8082-7f7034afa59e":["80a81923-8079-4820-b50c-5cd3df1b12e1","af17bd18-7341-4623-af40-b35190024b95","8308b963-e815-48b2-a8a7-ce85d1353533","907586bd-b127-4fc8-925d-7374bc0a39b3","f740a1e5-7a90-47b9-a4b1-654a97531cf1","41dc0b70-7750-46ef-a8ea-fd48d5c99b94","a544fcfc-0cbb-4b88-b2c1-5dcd7db0816b","5f312819-504f-4fae-ab3d-c823668d659b","6a3b7dc2-86c4-41e9-b132-9ed0a00a8dde","d1d83d0c-fde7-47a6-af75-696b0181f037","65b637c7-f0ca-4672-aa83-8306b386db2b","489a33cf-f216-48c2-9d18-987c3bc46280","048ce355-2a85-45c2-9d30-70eae30e832b","366c660c-4aa7-4160-9e22-e6ef4469c411","982c423f-5854-4c77-af54-9ae223a79db9","c25f5105-2ce2-4322-9637-09c2d74ac80a","f7a265c4-53b4-4c62-af43-adf2695e4272","b49f427c-4dfe-4510-8e8b-ba3befef77e0","60d16ad6-73cf-4bde-845c-000dff979205","c9ce52a1-c141-47ec-a32c-f087b6174c3e","dba35a53-38b0-41e8-b276-d62e24872944","c25bd76e-af9b-4020-abe0-1ba023c9df76","912f3e5b-8b82-47e9-af50-50e97a5e03b1","d809ef28-5a75-4f2a-8e28-9f895aa87bae","581dcdbb-6401-4025-b898-606326a92aae","5a4c3d1a-0e09-424b-8fd0-6de342e56291","9c672829-a31d-47cb-9d66-e676423a06da","fc366a69-db91-4f35-b538-182295436d18","6e52cca8-7baf-4c4f-97c5-effbf603eb14","7946446e-33e7-4bd5-a7b6-3d001271627c","fd347c00-e1ea-4961-8544-3048650deb2b","3cd6abe1-d84e-41c4-a421-07a63d196280","8c9e5644-55a8-44c2-ac7b-6fdea2680697","7ed49936-ac3f-4a7c-a70d-8ccd51b1c327","d0b23425-dc3b-46f2-92c5-451b2b648400","958692be-22c0-452b-90ac-6c36a431fafd","31da607d-07e2-4c54-9b1c-9a11a786c58f","3fdc58f1-93e1-4eb2-8e18-9be3282323a1","45fd1335-5429-47ea-a577-c11db18a28a0","68dbb9c3-e1a8-4287-b68a-db5070e55505","0136ea45-e1de-4444-b833-2d8cfd2cc956","96aad863-3686-497b-8638-99081b0c947e","33a93cd2-11ee-4ec2-9263-101b212474ab","1056ce6a-ac4b-410e-91d3-f8117a6084b0","849a7ae4-6a95-43dd-9c90-6ef41dc86a80","ccbe1be3-fea6-4080-bce3-e13de89e4e42","421a1524-3e5c-431e-8444-470cae1d6cbb","32ab0827-4dc7-4078-bd8a-88ea9064239d","8ac6d3c7-0806-4d9f-a790-88bbb45f9106","03c15033-710c-4035-8591-0017a7461ca9","9b56f8e2-0e81-4cce-9555-4f163eda2294","15110a27-64e0-45a5-b6ac-23df16688604","99052aeb-ef71-4cdb-ba64-1036a33417cc"],"af17bd18-7341-4623-af40-b35190024b95":["af17bd18-7341-4623-af40-b35190024b95"],"8308b963-e815-48b2-a8a7-ce85d1353533":["8308b963-e815-48b2-a8a7-ce85d1353533"],"907586bd-b127-4fc8-925d-7374bc0a39b3":["907586bd-b127-4fc8-925d-7374bc0a39b3"],"f740a1e5-7a90-47b9-a4b1-654a97531cf1":["f740a1e5-7a90-47b9-a4b1-654a97531cf1"],"41dc0b70-7750-46ef-a8ea-fd48d5c99b94":["41dc0b70-7750-46ef-a8ea-fd48d5c99b94"],"a544fcfc-0cbb-4b88-b2c1-5dcd7db0816b":["a544fcfc-0cbb-4b88-b2c1-5dcd7db0816b"],"5f312819-504f-4fae-ab3d-c823668d659b":["5f312819-504f-4fae-ab3d-c823668d659b"],"6a3b7dc2-86c4-41e9-b132-9ed0a00a8dde":["6a3b7dc2-86c4-41e9-b132-9ed0a00a8dde"],"d1d83d0c-fde7-47a6-af75-696b0181f037":["d1d83d0c-fde7-47a6-af75-696b0181f037"],"65b637c7-f0ca-4672-aa83-8306b386db2b":["65b637c7-f0ca-4672-aa83-8306b386db2b"],"489a33cf-f216-48c2-9d18-987c3bc46280":["489a33cf-f216-48c2-9d18-987c3bc46280"],"048ce355-2a85-45c2-9d30-70eae30e832b":["048ce355-2a85-45c2-9d30-70eae30e832b"],"366c660c-4aa7-4160-9e22-e6ef4469c411":["366c660c-4aa7-4160-9e22-e6ef4469c411"],"982c423f-5854-4c77-af54-9ae223a79db9":["982c423f-5854-4c77-af54-9ae223a79db9"],"c25f5105-2ce2-4322-9637-09c2d74ac80a":["c25f5105-2ce2-4322-9637-09c2d74ac80a"],"f7a265c4-53b4-4c62-af43-adf2695e4272":["f7a265c4-53b4-4c62-af43-adf2695e4272"],"b49f427c-4dfe-4510-8e8b-ba3befef77e0":["b49f427c-4dfe-4510-8e8b-ba3befef77e0"],"60d16ad6-73cf-4bde-845c-000dff979205":["60d16ad6-73cf-4bde-845c-000dff979205"],"c9ce52a1-c141-47ec-a32c-f087b6174c3e":["c9ce52a1-c141-47ec-a32c-f087b6174c3e"],"dba35a53-38b0-41e8-b276-d62e24872944":["dba35a53-38b0-41e8-b276-d62e24872944"],"c25bd76e-af9b-4020-abe0-1ba023c9df76":["c25bd76e-af9b-4020-abe0-1ba023c9df76"],"912f3e5b-8b82-47e9-af50-50e97a5e03b1":["912f3e5b-8b82-47e9-af50-50e97a5e03b1"],"d809ef28-5a75-4f2a-8e28-9f895aa87bae":["d809ef28-5a75-4f2a-8e28-9f895aa87bae"],"581dcdbb-6401-4025-b898-606326a92aae":["581dcdbb-6401-4025-b898-606326a92aae"],"5a4c3d1a-0e09-424b-8fd0-6de342e56291":["5a4c3d1a-0e09-424b-8fd0-6de342e56291"],"9c672829-a31d-47cb-9d66-e676423a06da":["9c672829-a31d-47cb-9d66-e676423a06da"],"fc366a69-db91-4f35-b538-182295436d18":["fc366a69-db91-4f35-b538-182295436d18"],"6e52cca8-7baf-4c4f-97c5-effbf603eb14":["6e52cca8-7baf-4c4f-97c5-effbf603eb14"],"7946446e-33e7-4bd5-a7b6-3d001271627c":["7946446e-33e7-4bd5-a7b6-3d001271627c"],"fd347c00-e1ea-4961-8544-3048650deb2b":["fd347c00-e1ea-4961-8544-3048650deb2b"],"3cd6abe1-d84e-41c4-a421-07a63d196280":["3cd6abe1-d84e-41c4-a421-07a63d196280"],"8c9e5644-55a8-44c2-ac7b-6fdea2680697":["8c9e5644-55a8-44c2-ac7b-6fdea2680697"],"7ed49936-ac3f-4a7c-a70d-8ccd51b1c327":["7ed49936-ac3f-4a7c-a70d-8ccd51b1c327"],"d0b23425-dc3b-46f2-92c5-451b2b648400":["d0b23425-dc3b-46f2-92c5-451b2b648400"],"958692be-22c0-452b-90ac-6c36a431fafd":["958692be-22c0-452b-90ac-6c36a431fafd"],"31da607d-07e2-4c54-9b1c-9a11a786c58f":["31da607d-07e2-4c54-9b1c-9a11a786c58f"],"3fdc58f1-93e1-4eb2-8e18-9be3282323a1":["3fdc58f1-93e1-4eb2-8e18-9be3282323a1"],"45fd1335-5429-47ea-a577-c11db18a28a0":["45fd1335-5429-47ea-a577-c11db18a28a0"],"68dbb9c3-e1a8-4287-b68a-db5070e55505":["68dbb9c3-e1a8-4287-b68a-db5070e55505"],"0136ea45-e1de-4444-b833-2d8cfd2cc956":["0136ea45-e1de-4444-b833-2d8cfd2cc956"],"96aad863-3686-497b-8638-99081b0c947e":["96aad863-3686-497b-8638-99081b0c947e"],"33a93cd2-11ee-4ec2-9263-101b212474ab":["33a93cd2-11ee-4ec2-9263-101b212474ab"],"1056ce6a-ac4b-410e-91d3-f8117a6084b0":["1056ce6a-ac4b-410e-91d3-f8117a6084b0"],"849a7ae4-6a95-43dd-9c90-6ef41dc86a80":["849a7ae4-6a95-43dd-9c90-6ef41dc86a80"],"ccbe1be3-fea6-4080-bce3-e13de89e4e42":["ccbe1be3-fea6-4080-bce3-e13de89e4e42"],"421a1524-3e5c-431e-8444-470cae1d6cbb":["421a1524-3e5c-431e-8444-470cae1d6cbb"],"32ab0827-4dc7-4078-bd8a-88ea9064239d":["32ab0827-4dc7-4078-bd8a-88ea9064239d"],"8ac6d3c7-0806-4d9f-a790-88bbb45f9106":["8ac6d3c7-0806-4d9f-a790-88bbb45f9106"],"03c15033-710c-4035-8591-0017a7461ca9":["03c15033-710c-4035-8591-0017a7461ca9"],"9b56f8e2-0e81-4cce-9555-4f163eda2294":["9b56f8e2-0e81-4cce-9555-4f163eda2294"],"15110a27-64e0-45a5-b6ac-23df16688604":["15110a27-64e0-45a5-b6ac-23df16688604"],"99052aeb-ef71-4cdb-ba64-1036a33417cc":["99052aeb-ef71-4cdb-ba64-1036a33417cc"]},"overwrites":{"a544fcfc-0cbb-4b88-b2c1-5dcd7db0816b":[],"d1d83d0c-fde7-47a6-af75-696b0181f037":[],"489a33cf-f216-48c2-9d18-987c3bc46280":[],"048ce355-2a85-45c2-9d30-70eae30e832b":[],"366c660c-4aa7-4160-9e22-e6ef4469c411":[],"f7a265c4-53b4-4c62-af43-adf2695e4272":[],"c9ce52a1-c141-47ec-a32c-f087b6174c3e":[],"dba35a53-38b0-41e8-b276-d62e24872944":[],"c25bd76e-af9b-4020-abe0-1ba023c9df76":[],"d809ef28-5a75-4f2a-8e28-9f895aa87bae":[],"5a4c3d1a-0e09-424b-8fd0-6de342e56291":[],"b49f427c-4dfe-4510-8e8b-ba3befef77e0":[],"60d16ad6-73cf-4bde-845c-000dff979205":[]},"lastSaveDate":"2023-12-29T19:21:43.135Z"}