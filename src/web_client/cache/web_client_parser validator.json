{"cache":{"d810e70b-f331-4c5e-938c-fc7b81720651":{"result":"- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.\n- part of determining which classes to render and which to import\n- name: 'primary class'\n- dependencies: ['classes', 'constants']\n- isJson: false\n- functions:\n  - calculateMaxTokens(inputTokenCount): return 120 \n    just return a fixed size cause we only want 1 name coming back, shouldn't be too long\n  - iterator(fragment, callback, resultSetter):\n      ```python\n        classes = await deps.classes.getResult(fragment)  \n        if len(classes) > 1:\n          await callback(fragment, classes)\n        elif len(classes) == 1:\n          resultSetter(classes[0])\n      ```    \n\n    - role: user, content:\n\n      > classes:\n      > {{classes}}\n      >\n      > feature list:\n      > # {{title}}\n      > {{content}}\n\n      replace:\n      - {{title}}: `fragment.title`\n      - {{content}}: `await deps.constants.getResult(fragment)`\n      - {{classes}}: `await deps.classes.getResult(fragment)`\n\n    - role: assistant, content:\n\n      > Remember: only return the name of the class that is the primary / root class.\n      > \n      > good response:\n      > x\n      >\n      > bad response:\n      > the primary / root class is x\n\n    - return: `result, [ ]`\n\n  - buildMessage(fragment,):\n- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.\n- part of determining which classes to render and which to import\n- name: 'primary class'\n- dependencies: ['classes', 'constants']\n- isJson: false\n- functions:\n  - calculateMaxTokens(inputTokenCount): return 120 \n    just return a fixed size cause we only want 1 name coming back, shouldn't be too long\n  - iterator(fragment, callback, resultSetter):\n      ```python\n        classes = await deps.classes.getResult(fragment)  \n        if len(classes) > 1:\n          await callback(fragment, classes)\n        elif len(classes) == 1:\n          resultSetter(classes[0])\n      ```    \n\n    - role: user, content:\n\n      > classes:\n      > {{classes}}\n      >\n      > feature list:\n      > # {{title}}\n      > {{content}}\n\n      replace:\n      - {{title}}: `fragment.title`\n      - {{content}}: `await deps.constants.getResult(fragment)`\n      - {{classes}}: `await deps.classes.getResult(fragment)`\n\n    - role: assistant, content:\n\n      > Remember: only return the name of the class that is the primary / root class.\n      > \n      > good response:\n      > x\n      >\n      > bad response:\n      > the primary / root class is x\n\n    - return: `result, [ ]`\n\n  - buildMessage(fragment,):\n  - buildMessage(fragment, ):\n- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.\n- part of determining which classes to render and which to import\n- name: 'primary class'\n- dependencies: ['classes', 'constants']\n- isJson: false\n- functions:\n  - calculateMaxTokens(inputTokenCount): return 120 \n    just return a fixed size cause we only want 1 name coming back, shouldn't be too long\n  - iterator(fragment, callback, resultSetter):\n      ```python\n        classes = await deps.classes.getResult(fragment)  \n        if len(classes) > 1:\n          await callback(fragment, classes)\n        elif len(classes) == 1:\n          resultSetter(classes[0])\n      ```    \n\n    - role: user, content:\n\n      > classes:\n      > {{classes}}\n      >\n      > feature list:\n      > # {{title}}\n      > {{content}}\n\n      replace:\n      - {{title}}: `fragment.title`\n      - {{content}}: `await deps.constants.getResult(fragment)`\n      - {{classes}}: `await deps.classes.getResult(fragment)`\n\n    - role: assistant, content:\n\n      > Remember: only return the name of the class that is the primary / root class.\n      > \n      > good response:\n      > x\n      >\n      > bad response:\n      > the primary / root class is x\n\n    - return: `result, [ ]`\n\n  - buildMessage(fragment,):\n- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.\n- part of determining which classes to render and which to import\n- name: 'primary class'\n- dependencies: ['classes', 'constants']\n- isJson: false\n- functions:\n  - calculateMaxTokens(inputTokenCount): return 120 \n    just return a fixed size cause we only want 1 name coming back, shouldn't be too long\n  - iterator(fragment, callback, resultSetter):\n      ```python\n        classes = await deps.classes.getResult(fragment)  \n        if len(classes) > 1:\n          await callback(fragment, classes)\n        elif len(classes) == 1:\n          resultSetter(classes[0])\n      ```    \n\n    - role: user, content:\n\n      > classes:\n      > {{classes}}\n      >\n      > feature list:\n      > # {{title}}\n      > {{content}}\n\n      replace:\n      - {{title}}: `fragment.title`\n      - {{content}}: `await deps.constants.getResult(fragment)`\n      - {{classes}}: `await deps.classes.getResult(fragment)`\n\n    - role: assistant, content:\n\n      > Remember: only return the name of the class that is the primary / root class.\n      > \n      > good response:\n      > x\n      >\n      > bad response:\n      > the primary / root class is x\n\n    - return: `result, [ ]`\n\n  - buildMessage(fragment,):\n  - buildMessage(fragment, ):\n  - buildMessage(fragment, classes):\n- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.\n- part of determining which classes to render and which to import\n- name: 'primary class'\n- dependencies: ['classes', 'constants']\n- isJson: false\n- functions:\n  - calculateMaxTokens(inputTokenCount): return 120 \n    just return a fixed size cause we only want 1 name coming back, shouldn't be too long\n  - iterator(fragment, callback, resultSetter):\n      ```python\n        classes = await deps.classes.getResult(fragment)  \n        if len(classes) > 1:\n          await callback(fragment, classes)\n        elif len(classes) == 1:\n          resultSetter(classes[0])\n      ```    \n\n    - role: user, content:\n\n      > classes:\n      > {{classes}}\n      >\n      > feature list:\n      > # {{title}}\n      > {{content}}\n\n      replace:\n      - {{title}}: `fragment.title`\n      - {{content}}: `await deps.constants.getResult(fragment)`\n      - {{classes}}: `await deps.classes.getResult(fragment)`\n\n    - role: assistant, content:\n\n      > Remember: only return the name of the class that is the primary / root class.\n      > \n      > good response:\n      > x\n      >\n      > bad response:\n      > the primary / root class is x\n\n    - return: `result, [ ]`\n\n  - buildMessage(fragment,):\n- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.\n- part of determining which classes to render and which to import\n- name: 'primary class'\n- dependencies: ['classes', 'constants']\n- isJson: false\n- functions:\n  - calculateMaxTokens(inputTokenCount): return 120 \n    just return a fixed size cause we only want 1 name coming back, shouldn't be too long\n  - iterator(fragment, callback, resultSetter):\n      ```python\n        classes = await deps.classes.getResult(fragment)  \n        if len(classes) > 1:\n          await callback(fragment, classes)\n        elif len(classes) == 1:\n          resultSetter(classes[0])\n      ```    \n\n    - role: user, content:\n\n      > classes:\n      > {{classes}}\n      >\n      > feature list:\n      > # {{title}}\n      > {{content}}\n\n      replace:\n      - {{title}}: `fragment.title`\n      - {{content}}: `await deps.constants.getResult(fragment)`\n      - {{classes}}: `await deps.classes.getResult(fragment)`\n\n    - role: assistant, content:\n\n      > Remember: only return the name of the class that is the primary / root class.\n      > \n      > good response:\n      > x\n      >\n      > bad response:\n      > the primary / root class is x\n\n    - return: `result, [ ]`\n\n  - buildMessage(fragment,):\n  - buildMessage(fragment, ):\n- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.\n- part of determining which classes to render and which to import\n- name: 'primary class'\n- dependencies: ['classes', 'constants']\n- isJson: false\n- functions:\n  - calculateMaxTokens(inputTokenCount): return 120 \n    just return a fixed size cause we only want 1 name coming back, shouldn't be too long\n  - iterator(fragment, callback, resultSetter):\n      ```python\n        classes = await deps.classes.getResult(fragment)  \n        if len(classes) > 1:\n          await callback(fragment, classes)\n        elif len(classes) == 1:\n          resultSetter(classes[0])\n      ```    \n\n    - role: user, content:\n\n      > classes:\n      > {{classes}}\n      >\n      > feature list:\n      > # {{title}}\n      > {{content}}\n\n      replace:\n      - {{title}}: `fragment.title`\n      - {{content}}: `await deps.constants.getResult(fragment)`\n      - {{classes}}: `await deps.classes.getResult(fragment)`\n\n    - role: assistant, content:\n\n      > Remember: only return the name of the class that is the primary / root class.\n      > \n      > good response:\n      > x\n      >\n      > bad response:\n      > the primary / root class is x\n\n    - return: `result, [ ]`\n\n  - buildMessage(fragment,):\n- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.\n- part of determining which classes to render and which to import\n- name: 'primary class'\n- dependencies: ['classes', 'constants']\n- isJson: false\n- functions:\n  - calculateMaxTokens(inputTokenCount): return 120 \n    just return a fixed size cause we only want 1 name coming back, shouldn't be too long\n  - iterator(fragment, callback, resultSetter):\n      ```python\n        classes = await deps.classes.getResult(fragment)  \n        if len(classes) > 1:\n          await callback(fragment, classes)\n        elif len(classes) == 1:\n          resultSetter(classes[0])\n      ```    \n\n    - role: user, content:\n\n      > classes:\n      > {{classes}}\n      >\n      > feature list:\n      > # {{title}}\n      > {{content}}\n\n      replace:\n      - {{title}}: `fragment.title`\n      - {{content}}: `await deps.constants.getResult(fragment)`\n      - {{classes}}: `await deps.classes.getResult(fragment)`\n\n    - role: assistant, content:\n\n      > Remember: only return the name of the class that is the primary / root class.\n      > \n      > good response:\n      > x\n      >\n      > bad response:\n      > the primary / root class is x\n\n    - return: `result, [ ]`\n\n  - buildMessage(fragment,):\n  - buildMessage(fragment, ):\n  - buildMessage(fragment, classes):","prompt":["- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.","- part of determining which classes to render and which to import","- name: 'primary class'","- dependencies: ['classes', 'constants']","- isJson: false","- functions:","  - calculateMaxTokens(inputTokenCount): return 120 ","    just return a fixed size cause we only want 1 name coming back, shouldn't be too long","  - iterator(fragment, callback, resultSetter):","      ```python","        classes = await deps.classes.getResult(fragment)  ","        if len(classes) > 1:","          await callback(fragment, classes)","        elif len(classes) == 1:","          resultSetter(classes[0])","      ```    ","","    - role: user, content:","","      > classes:","      > {{classes}}","      >","      > feature list:","      > # {{title}}","      > {{content}}","","      replace:","      - {{title}}: `fragment.title`","      - {{content}}: `await deps.constants.getResult(fragment)`","      - {{classes}}: `await deps.classes.getResult(fragment)`","","    - role: assistant, content:","","      > Remember: only return the name of the class that is the primary / root class.","      > ","      > good response:","      > x","      >","      > bad response:","      > the primary / root class is x","","    - return: `result, [ ]`","","  - buildMessage(fragment,):","- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.","- part of determining which classes to render and which to import","- name: 'primary class'","- dependencies: ['classes', 'constants']","- isJson: false","- functions:","  - calculateMaxTokens(inputTokenCount): return 120 ","    just return a fixed size cause we only want 1 name coming back, shouldn't be too long","  - iterator(fragment, callback, resultSetter):","      ```python","        classes = await deps.classes.getResult(fragment)  ","        if len(classes) > 1:","          await callback(fragment, classes)","        elif len(classes) == 1:","          resultSetter(classes[0])","      ```    ","","    - role: user, content:","","      > classes:","      > {{classes}}","      >","      > feature list:","      > # {{title}}","      > {{content}}","","      replace:","      - {{title}}: `fragment.title`","      - {{content}}: `await deps.constants.getResult(fragment)`","      - {{classes}}: `await deps.classes.getResult(fragment)`","","    - role: assistant, content:","","      > Remember: only return the name of the class that is the primary / root class.","      > ","      > good response:","      > x","      >","      > bad response:","      > the primary / root class is x","","    - return: `result, [ ]`","","  - buildMessage(fragment,):","  - buildMessage(fragment, ):","- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.","- part of determining which classes to render and which to import","- name: 'primary class'","- dependencies: ['classes', 'constants']","- isJson: false","- functions:","  - calculateMaxTokens(inputTokenCount): return 120 ","    just return a fixed size cause we only want 1 name coming back, shouldn't be too long","  - iterator(fragment, callback, resultSetter):","      ```python","        classes = await deps.classes.getResult(fragment)  ","        if len(classes) > 1:","          await callback(fragment, classes)","        elif len(classes) == 1:","          resultSetter(classes[0])","      ```    ","","    - role: user, content:","","      > classes:","      > {{classes}}","      >","      > feature list:","      > # {{title}}","      > {{content}}","","      replace:","      - {{title}}: `fragment.title`","      - {{content}}: `await deps.constants.getResult(fragment)`","      - {{classes}}: `await deps.classes.getResult(fragment)`","","    - role: assistant, content:","","      > Remember: only return the name of the class that is the primary / root class.","      > ","      > good response:","      > x","      >","      > bad response:","      > the primary / root class is x","","    - return: `result, [ ]`","","  - buildMessage(fragment,):","- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.","- part of determining which classes to render and which to import","- name: 'primary class'","- dependencies: ['classes', 'constants']","- isJson: false","- functions:","  - calculateMaxTokens(inputTokenCount): return 120 ","    just return a fixed size cause we only want 1 name coming back, shouldn't be too long","  - iterator(fragment, callback, resultSetter):","      ```python","        classes = await deps.classes.getResult(fragment)  ","        if len(classes) > 1:","          await callback(fragment, classes)","        elif len(classes) == 1:","          resultSetter(classes[0])","      ```    ","","    - role: user, content:","","      > classes:","      > {{classes}}","      >","      > feature list:","      > # {{title}}","      > {{content}}","","      replace:","      - {{title}}: `fragment.title`","      - {{content}}: `await deps.constants.getResult(fragment)`","      - {{classes}}: `await deps.classes.getResult(fragment)`","","    - role: assistant, content:","","      > Remember: only return the name of the class that is the primary / root class.","      > ","      > good response:","      > x","      >","      > bad response:","      > the primary / root class is x","","    - return: `result, [ ]`","","  - buildMessage(fragment,):","  - buildMessage(fragment, ):","  - buildMessage(fragment, classes):","- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.","- part of determining which classes to render and which to import","- name: 'primary class'","- dependencies: ['classes', 'constants']","- isJson: false","- functions:","  - calculateMaxTokens(inputTokenCount): return 120 ","    just return a fixed size cause we only want 1 name coming back, shouldn't be too long","  - iterator(fragment, callback, resultSetter):","      ```python","        classes = await deps.classes.getResult(fragment)  ","        if len(classes) > 1:","          await callback(fragment, classes)","        elif len(classes) == 1:","          resultSetter(classes[0])","      ```    ","","    - role: user, content:","","      > classes:","      > {{classes}}","      >","      > feature list:","      > # {{title}}","      > {{content}}","","      replace:","      - {{title}}: `fragment.title`","      - {{content}}: `await deps.constants.getResult(fragment)`","      - {{classes}}: `await deps.classes.getResult(fragment)`","","    - role: assistant, content:","","      > Remember: only return the name of the class that is the primary / root class.","      > ","      > good response:","      > x","      >","      > bad response:","      > the primary / root class is x","","    - return: `result, [ ]`","","  - buildMessage(fragment,):","- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.","- part of determining which classes to render and which to import","- name: 'primary class'","- dependencies: ['classes', 'constants']","- isJson: false","- functions:","  - calculateMaxTokens(inputTokenCount): return 120 ","    just return a fixed size cause we only want 1 name coming back, shouldn't be too long","  - iterator(fragment, callback, resultSetter):","      ```python","        classes = await deps.classes.getResult(fragment)  ","        if len(classes) > 1:","          await callback(fragment, classes)","        elif len(classes) == 1:","          resultSetter(classes[0])","      ```    ","","    - role: user, content:","","      > classes:","      > {{classes}}","      >","      > feature list:","      > # {{title}}","      > {{content}}","","      replace:","      - {{title}}: `fragment.title`","      - {{content}}: `await deps.constants.getResult(fragment)`","      - {{classes}}: `await deps.classes.getResult(fragment)`","","    - role: assistant, content:","","      > Remember: only return the name of the class that is the primary / root class.","      > ","      > good response:","      > x","      >","      > bad response:","      > the primary / root class is x","","    - return: `result, [ ]`","","  - buildMessage(fragment,):","  - buildMessage(fragment, ):","- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.","- part of determining which classes to render and which to import","- name: 'primary class'","- dependencies: ['classes', 'constants']","- isJson: false","- functions:","  - calculateMaxTokens(inputTokenCount): return 120 ","    just return a fixed size cause we only want 1 name coming back, shouldn't be too long","  - iterator(fragment, callback, resultSetter):","      ```python","        classes = await deps.classes.getResult(fragment)  ","        if len(classes) > 1:","          await callback(fragment, classes)","        elif len(classes) == 1:","          resultSetter(classes[0])","      ```    ","","    - role: user, content:","","      > classes:","      > {{classes}}","      >","      > feature list:","      > # {{title}}","      > {{content}}","","      replace:","      - {{title}}: `fragment.title`","      - {{content}}: `await deps.constants.getResult(fragment)`","      - {{classes}}: `await deps.classes.getResult(fragment)`","","    - role: assistant, content:","","      > Remember: only return the name of the class that is the primary / root class.","      > ","      > good response:","      > x","      >","      > bad response:","      > the primary / root class is x","","    - return: `result, [ ]`","","  - buildMessage(fragment,):","- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.","- part of determining which classes to render and which to import","- name: 'primary class'","- dependencies: ['classes', 'constants']","- isJson: false","- functions:","  - calculateMaxTokens(inputTokenCount): return 120 ","    just return a fixed size cause we only want 1 name coming back, shouldn't be too long","  - iterator(fragment, callback, resultSetter):","      ```python","        classes = await deps.classes.getResult(fragment)  ","        if len(classes) > 1:","          await callback(fragment, classes)","        elif len(classes) == 1:","          resultSetter(classes[0])","      ```    ","","    - role: user, content:","","      > classes:","      > {{classes}}","      >","      > feature list:","      > # {{title}}","      > {{content}}","","      replace:","      - {{title}}: `fragment.title`","      - {{content}}: `await deps.constants.getResult(fragment)`","      - {{classes}}: `await deps.classes.getResult(fragment)`","","    - role: assistant, content:","","      > Remember: only return the name of the class that is the primary / root class.","      > ","      > good response:","      > x","      >","      > bad response:","      > the primary / root class is x","","    - return: `result, [ ]`","","  - buildMessage(fragment,):","  - buildMessage(fragment, ):","  - buildMessage(fragment, classes):"],"state":"still-valid"},"8325ad6e-bbd0-4925-8130-d30f0f257e3a":{"result":"- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.\n- part of determining which classes to render and which to import\n- name: 'primary class'\n- dependencies: ['classes', 'constants']\n- isJson: false\n- functions:\n  - calculateMaxTokens(inputTokenCount): return 120 \n    just return a fixed size cause we only want 1 name coming back, shouldn't be too long\n  - iterator(fragment, callback, resultSetter):\n      ```python\n        classes = await deps.classes.getResult(fragment)  \n        if len(classes) > 1:\n          await callback(fragment, classes)\n        elif len(classes) == 1:\n          resultSetter(classes[0])\n      ```    \n  - buildMessage(fragment, classes):\n    - result (json array):\n    - role: system, content:\n\n      > Act as an ai software analyst.\n      > It is your task to classify which of the following classes is the primary / root class described in the feature list.\n      > Only return the name of the class that is the primary / root, no explanation or any more text.\n\n    - role: user, content:\n\n      > classes:\n      > {{classes}}\n      >\n      > feature list:\n      > # {{title}}\n      > {{content}}\n\n      replace:\n      - {{title}}: `fragment.title`\n      - {{content}}: `await deps.constants.getResult(fragment)`\n      - {{classes}}: `JSON.stringify(classes)`\n\n    - role: assistant, content:\n\n      > Remember: only return the name of the class that is the primary / root class.\n      > \n      > good response:\n      > x\n      >\n      > bad response:\n      > the primary / root class is x\n\n    - return: `result, [ ]`\n","prompt":["- The primary-class service is responsible for identifying the class that is most of all described and stands out as the most important item in the text-fragment.","- part of determining which classes to render and which to import","- name: 'primary class'","- dependencies: ['classes', 'constants']","- isJson: false","- functions:","  - calculateMaxTokens(inputTokenCount): return 120 ","    just return a fixed size cause we only want 1 name coming back, shouldn't be too long","  - iterator(fragment, callback, resultSetter):","      ```python","        classes = await deps.classes.getResult(fragment)  ","        if len(classes) > 1:","          await callback(fragment, classes)","        elif len(classes) == 1:","          resultSetter(classes[0])","      ```    ","  - buildMessage(fragment, classes):","    - result (json array):","    - role: system, content:","","      > Act as an ai software analyst.","      > It is your task to classify which of the following classes is the primary / root class described in the feature list.","      > Only return the name of the class that is the primary / root, no explanation or any more text.","","    - role: user, content:","","      > classes:","      > {{classes}}","      >","      > feature list:","      > # {{title}}","      > {{content}}","","      replace:","      - {{title}}: `fragment.title`","      - {{content}}: `await deps.constants.getResult(fragment)`","      - {{classes}}: `JSON.stringify(classes)`","","    - role: assistant, content:","","      > Remember: only return the name of the class that is the primary / root class.","      > ","      > good response:","      > x","      >","      > bad response:","      > the primary / root class is x","","    - return: `result, [ ]`",""],"state":"still-valid"}},"secondaryCache":{"d810e70b-f331-4c5e-938c-fc7b81720651":["d810e70b-f331-4c5e-938c-fc7b81720651"],"8325ad6e-bbd0-4925-8130-d30f0f257e3a":["8325ad6e-bbd0-4925-8130-d30f0f257e3a"]},"overwrites":{},"lastSaveDate":"2023-12-30T14:35:35.279Z"}